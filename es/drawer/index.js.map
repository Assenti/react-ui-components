{"version":3,"sources":["../../src/components/drawer/index.js"],"names":["React","useEffect","useState","CSSTransition","Button","Tooltip","Drawer","props","isXs","setIsXs","drawerClass","result","className","name","collapsable","smooth","min","absolute","fullHeight","dark","light","key","trim","handleClose","e","preventDefault","currentTarget","target","onClose","window","addEventListener","innerWidth","drawer","header","headerCentered","children","onResize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Button } from '../button';\nimport { Tooltip } from '../tooltip';\n\nexport const Drawer = (props) => {\n    const [isXs, setIsXs] = useState(false);\n\n    const drawerClass = () => {\n        let result = '';\n        let className = {\n            name: 'drawer',\n            collapsable: props.collapsable ? 'collapsable' : '',\n            smooth: props.smooth ? 'smooth' : '',\n            min: props.min ? 'min' : '',\n            absolute: props.absolute ? 'absolute' : '',\n            fullHeight: props.fullHeight ? 'full-height' : '',\n            dark: props.dark && !props.light ? 'dark' : ''\n        }\n        \n        for (const key in className) {\n            if (className[key]) result += className[key] + ' '\n        }\n        return result.trim();\n    }\n\n    const handleClose = (e) => {\n        e.preventDefault();\n        if (e.currentTarget === e.target) {\n            if (props.onClose) props.onClose()\n        } \n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', () => {\n            if (window.innerWidth > 529) {\n                setIsXs(false)\n            } else {\n                setIsXs(true)\n            }\n        })\n    }, [])\n\n    return (\n        <React.Fragment>\n            {isXs ?\n            <CSSTransition\n                in={props.drawer}\n                timeout={100}\n                classNames=\"drawer-background\"\n                unmountOnExit>\n                <div className={props.drawer ? \n                        'drawer-background' : \n                        'drawer-background none'} \n                        onClick={handleClose}>\n                    <CSSTransition\n                        in={props.drawer}\n                        timeout={300}\n                        classNames=\"drawer\"\n                        unmountOnExit>\n                        <CSSTransition\n                            in={props.min}\n                            timeout={300}\n                            classNames=\"expand\">\n                                <div className={drawerClass()}>\n                                    <div className=\"drawer-content\">\n                                        {props.header ? <div className={props.headerCentered ? \n                                                'drawer-header centered' : 'drawer-header'}>\n                                                    {props.header}</div> : ''}\n                                        {props.children}\n                                    </div>\n                                    {props.collapsable ? <div className=\"drawer-footer\">\n                                        <Tooltip tooltip={props.min ? 'Expand' : 'Collapse'}>\n                                            <Button\n                                                dark={props.dark}\n                                                light={props.dark ? false : true}\n                                                icon={props.min ? 'chevron-double-right' : 'chevron-double-left'}\n                                                onClick={() => props.onResize()}/>\n                                        </Tooltip>\n                                    </div> : ''}\n                                </div>\n                            \n                        </CSSTransition>\n                    </CSSTransition>\n                </div>\n            </CSSTransition> :\n            <CSSTransition\n                in={props.drawer}\n                timeout={300}\n                classNames=\"drawer\"\n                unmountOnExit>\n                <CSSTransition\n                    in={props.min}\n                    timeout={300}\n                    classNames=\"expand\">\n                        <div className={drawerClass()}>\n                            <div className=\"drawer-content\">\n                                {props.header ? <div className={props.headerCentered ? \n                                        'drawer-header centered' : 'drawer-header'}>\n                                            {props.header}</div> : ''}\n                                {props.children}\n                            </div>\n                            {props.collapsable ? <div className=\"drawer-footer\">\n                                <Tooltip tooltip={props.min ? 'Expand' : 'Collapse'}>\n                                    <Button\n                                        dark={props.dark}\n                                        light={props.dark ? false : true}\n                                        icon={props.min ? 'chevron-double-right' : 'chevron-double-left'}\n                                        onClick={() => props.onResize()}/>\n                                </Tooltip>\n                            </div> : ''}\n                        </div>\n                    \n                </CSSTransition>\n            </CSSTransition>\n            }\n        </React.Fragment>\n    )\n}\n"],"file":"index.js"}