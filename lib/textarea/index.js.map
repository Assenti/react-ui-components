{"version":3,"sources":["../../src/components/textarea/index.js"],"names":["React","useState","useRef","useEffect","Icon","TextareaField","props","input","focus","setFocus","rows","setRows","minRows","maxRows","isChanged","setIsChanged","getInputColor","required","value","color","inputFieldClass","result","className","whiteBackground","size","borderType","lifted","uppercase","disabled","key","trim","handleFocus","e","onFocus","handleBlur","onBlur","handleClear","onClear","handleChange","textareaLineHeight","previousRows","target","currentRows","scrollHeight","scrollTop","onChange","autoFocus","current","width","label","prefix","paddingLeft","paddingRight","suffix","tabIndex","readOnly","onKeyUp","placeholder","clearable"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Icon } from '../icon';\n\nexport const TextareaField = (props) => {\n    const input = useRef(null);\n    const [focus, setFocus] = useState(false);\n    const [rows, setRows] = useState(props.rows ? props.rows : 1);\n    const [minRows] = useState(props.rows ? props.rows : 1)\n    const [maxRows] = useState(props.maxRows ? props.maxRows : 10);\n    const [isChanged, setIsChanged] = useState(false);\n\n    const getInputColor = () => {\n        if (props.required) {\n            if (isChanged && !props.value) {\n                return 'error';\n            } else {\n                return props.color ? props.color : 'primary';\n            }\n        } else {\n            return props.color ? props.color : 'primary';\n        }\n    }\n\n    const inputFieldClass = () => {\n        let result = '';\n        let className = {\n            input: 'rui-input-field',\n            whiteBackground: props.whiteBackground ? 'white-background' : '',\n            size: props.size ? props.size : '',\n            borderType: props.borderType && props.borderType !== 'rounded' ? props.borderType : '',\n            lifted: props.lifted ? 'lifted' : '',\n            uppercase: props.uppercase ? 'uppercase' : '',\n            color: getInputColor(),\n            disabled: props.disabled ? 'disabled' : '',\n            className: props.className ? props.className : ''\n        }\n        \n        for (const key in className) {\n            if (className[key]) result += className[key] + ' '\n        }\n        return result.trim();\n    }\n\n    const handleFocus = (e) => {\n        if (props.onFocus) props.onFocus(e)\n        setFocus(true)\n    }\n\n    const handleBlur = (e) => {\n        if (props.onBlur) props.onBlur(e)\n        setFocus(false)\n    }\n\n    const handleClear = () => {\n        setFocus(false)\n        props.onClear()\n    }\n\n    const handleChange = (e) => {\n        const textareaLineHeight = 24;\n\t\tconst previousRows = e.target.rows;\n        e.target.rows = minRows;\n            \n        const currentRows = ~~(e.target.scrollHeight / textareaLineHeight);\n        \n        if (currentRows === previousRows) {\n            e.target.rows = currentRows;\n        }\n            \n        if (currentRows >= maxRows) {\n            e.target.rows = maxRows;\n            e.target.scrollTop = e.target.scrollHeight;\n        }\n\n        if (props.onChange) {\n            props.onChange(e) \n            setIsChanged(true)\n        }\n        \n        setRows(currentRows < maxRows ? currentRows : maxRows)\n    }\n\n    useEffect(() => {\n        if (props.autoFocus) input.current.focus();\n        if (!props.value) setRows(props.rows ? props.rows : 1)\n    }, [props.value])\n\n    return (\n        <div className={inputFieldClass()} style={{ width: props.width ? props.width : ''}}>\n            {props.label ? \n            <label className={focus ? 'active' : ''} \n                onClick={() => input.current.focus()}>{props.required ? <span className=\"text-error\">*</span> : ''} {props.label}</label> \n            : ''}\n            <div className={focus ? 'rui-input-container focus' : 'rui-input-container'}>\n                {props.prefix ? <span className=\"rui-input-prefix\">{props.prefix}</span> : ''}\n                <textarea\n                    style={{ \n                        paddingLeft: props.prefix ? 0 : '',\n                        paddingRight: props.suffix ? 0 : ''\n                    }}\n                    onFocus={handleFocus}\n                    onBlur={handleBlur}\n                    ref={input}\n                    rows={rows}\n                    tabIndex={props.tabIndex}\n                    readOnly={props.readOnly || !props.onChange ? true : false}\n                    disabled={props.disabled}\n                    required={props.required}\n                    value={props.value}\n                    onKeyUp={props.onKeyUp}\n                    placeholder={props.placeholder} \n                    onChange={handleChange}></textarea>\n                {props.value && props.clearable ? \n                    <Icon name=\"close\" \n                        onClick={() => props.onClear ? handleClear() : {}} \n                        className=\"rui-input-clear\"/> : ''}\n                {props.suffix ? <span className=\"rui-input-suffix\">{props.suffix}</span> : ''}\n            </div>\n        </div>\n    )\n}"],"file":"index.js"}