{"version":3,"sources":["../../src/components/popover/index.js"],"names":["React","useState","createRef","CSSTransition","Icon","PopOver","props","visible","setVisible","popup","content","popoverClass","result","className","name","dark","position","bottom","key","trim","control","noBlur","onClose","trigger","title","children"],"mappings":"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","sourcesContent":["import React, { useState, createRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon } from '../icon';\n\nexport const PopOver = (props) => {\n    const [visible, setVisible] = useState(false);\n    const popup = createRef();\n    const content = createRef();\n\n    const popoverClass = () => {\n        let result = '';\n        let className = {\n            name: 'popover',\n            dark: props.dark ? 'dark' : '',\n            position: props.bottom ? 'bottom' : '',\n            className: props.className ? props.className : ''\n        }\n        \n        for (const key in className) {\n            if (className[key]) result += className[key] + ' '\n        }\n        return result.trim();\n    }\n\n    return (\n        <div className={popoverClass()}\n            tabIndex={-1}  \n            ref={popup}\n            onBlur={() => props.control && !props.noBlur ? props.onClose() : setVisible(false)}\n            onMouseLeave={() => props.trigger === 'hover' ? setVisible(false) : {}} >\n            <CSSTransition\n                in={props.control ? props.visible : visible}\n                timeout={150}\n                classNames={props.bottom ? 'popdown' : 'popup' }\n                unmountOnExit>\n                <div className=\"popover__content\" id=\"popover-content\" ref={content}>\n                    <div className=\"popover__content-header\">\n                        <span>{props.title}</span>\n                        <Icon size={18} \n                            name=\"close\" \n                            color={props.dark ? '#fff' : 'gray'} \n                            onClick={() => props.control ? props.onClose() : setVisible(false)}/>\n                    </div>\n                    <div className=\"popover__content-body\">{props.content}</div>\n                </div>\n            </CSSTransition>\n            <div className=\"popover__children\"\n                onMouseOver={() => props.trigger === 'hover' ? setVisible(true) : {}}\n                onClick={() => props.trigger !== 'hover' ? \n                    (props.control ? {} : setVisible(!visible)) : {}}>{props.children}</div>\n        </div>\n    )\n}\n"],"file":"index.js"}