(this["webpackJsonp@assenti/rui-components"]=this["webpackJsonp@assenti/rui-components"]||[]).push([[12],{277:function(e,t,n){"use strict";n.r(t);var a=n(1),o=n(0),l=n.n(o),r=n(3),c=n(310),s=n(271),i=["property","description","default","type","value"],p=[{property:"onClick",description:"Handle button click",default:"",type:"function",value:"return a button click event object"},{property:"name",description:"Set button name (can be set with icon)",default:"",type:"string",value:""},{property:"type",description:"Set button type",default:"button",type:"string",value:"button | submit | reset"},{property:"lifted",description:"Lift up the button",default:"false",type:"boolean",value:"true | false"},{property:"color",description:"Set background and border color of button from list",default:"",type:"string",value:"primary | info | success | error | black | secondary"},{property:"disabled",description:"Make Button disabled",default:"false",type:"boolean",value:"true | false"},{property:"loading",description:"Activate loading and make Button disabled",default:"false",type:"boolean",value:"true | false"},{property:"borderType",description:"Set Button border type",default:"false",type:"boolean",value:"smooth | rounded | tile"},{property:"outlined",description:"Make button background transparent and outline borders",default:"false",type:"boolean",value:"true | false"},{property:"uppercase",description:"Transform text to upper case",default:"false",type:"boolean",value:"true | false"},{property:"block",description:"Fills the parent component width",default:"false",type:"boolean",value:"true | false"},{property:"size",description:"Set button size",default:"",type:"string",value:"medium | large"},{property:"icon",description:"Set icon in a button and give circle shape to it (can be set with name)",default:"",type:"string",value:"home | search | etc."},{property:"iconSize",description:"Set icon size",default:"24px",type:"number",value:""},{property:"iconLeft",description:"Change icon position to the left from name",default:"false",type:"boolean",value:"true | false"},{property:"iconAllotted",description:"Allot an icon (has effect with outlined prop)",default:"false",type:"boolean",value:"true | false"},{property:"dark",description:"Set dark mode (can not be used with light prop)",default:"false",type:"boolean",value:"true | false"},{property:"light",description:"Set light mode (can not be used with dark prop)",default:"false",type:"boolean",value:"true | false"},{property:"setRef",description:"Set ref",default:"",type:"React.RefObject",value:""},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}],u=["default","medium","large"],d=["primary","info","success","error","secondary","black"],m=["default","rounded","smooth","tile"],b=["dark","light","none"];t.default=function(){var e=Object(o.useRef)(),t=Object(o.useRef)(),n=Object(o.useState)(!1),f=Object(a.a)(n,2),h=f[0],y=f[1],g=Object(o.useState)(!1),S=Object(a.a)(g,2),k=S[0],v=S[1],O=Object(o.useState)(!1),L=Object(a.a)(O,2),E=L[0],N=L[1],C=Object(o.useState)(!1),j=Object(a.a)(C,2),w=j[0],A=j[1],z=Object(o.useState)(!1),B=Object(a.a)(z,2),I=B[0],x=B[1],R=Object(o.useState)(!1),T=Object(a.a)(R,2),D=T[0],U=T[1],P=Object(o.useState)(!1),G=Object(a.a)(P,2),J=G[0],M=G[1],V=Object(o.useState)(!1),W=Object(a.a)(V,2),F=W[0],H=W[1],q=Object(o.useState)(!1),K=Object(a.a)(q,2),Q=K[0],X=K[1],Y=Object(o.useState)(!1),Z=Object(a.a)(Y,2),$=Z[0],_=Z[1],ee=Object(o.useState)(u[0]),te=Object(a.a)(ee,2),ne=te[0],ae=te[1],oe=Object(o.useState)(m[0]),le=Object(a.a)(oe,2),re=le[0],ce=le[1],se=Object(o.useState)(d[0]),ie=Object(a.a)(se,2),pe=ie[0],ue=ie[1],de=Object(o.useState)(""),me=Object(a.a)(de,2),be=me[0],fe=me[1];return l.a.createElement("div",{className:"rui-page",ref:e},l.a.createElement("div",{className:"row align-center space-between"},l.a.createElement("div",{className:"rui-page-title"},"Button Component"),l.a.createElement("div",{onClick:function(){t.current&&t.current.scrollIntoView({behavior:"smooth",block:"start"})},className:"rui-link fz-13 fw-bold"},"API")),l.a.createElement(r.f,{outlined:!0,title:"Button usage"},l.a.createElement(r.z,{items:u,prefix:l.a.createElement(r.o,{name:"format-size"}),width:200,label:"Button size",color:"primary",className:"pl-10",value:ne,onChange:function(e){return ae(e)}}),l.a.createElement("br",null),l.a.createElement(r.z,{items:m,prefix:l.a.createElement(r.o,{name:"shape"}),width:200,label:"Button border type",color:"primary",className:"pl-10",value:re,onChange:function(e){return ce(e)}}),l.a.createElement("br",null),l.a.createElement(r.z,{items:d,prefix:l.a.createElement(r.o,{name:"brush"}),width:200,label:"Button color",color:"primary",className:"pl-10",value:pe,onChange:function(e){return ue(e)}}),l.a.createElement("br",null),l.a.createElement(r.A,{color:"primary",check:k,rightLabel:"Outlined",className:"pl-10 my-10",onChange:function(){return v(!k)}}),l.a.createElement(r.A,{check:E,color:"primary",rightLabel:"Uppercase",className:"pl-10 my-10",onChange:function(){return N(!E)}}),l.a.createElement("br",null),l.a.createElement(r.A,{check:h,color:"primary",rightLabel:"Loading",className:"pl-10 my-10",onChange:function(){return y(!h)}}),l.a.createElement(r.A,{check:I,color:"primary",rightLabel:"Disabled",className:"pl-10 my-10",onChange:function(){return x(!I)}}),l.a.createElement("br",null),l.a.createElement(r.A,{check:w,color:"primary",rightLabel:"Block",className:"pl-10 my-10",onChange:function(){return A(!w)}}),l.a.createElement(r.A,{check:F,color:"primary",rightLabel:"Lifted",className:"pl-10 my-10",onChange:function(){return H(!F)}}),l.a.createElement("br",null),l.a.createElement(r.A,{check:D,color:"primary",rightLabel:"With icon",className:"pl-10 my-10",onChange:function(){return U(!D)}}),l.a.createElement(r.A,{check:J,color:"primary",rightLabel:"Left icon",className:"pl-10 my-10",onChange:function(){return M(!J)}}),l.a.createElement(r.A,{check:Q,color:"primary",rightLabel:"Allotted icon",className:"pl-10 my-10",onChange:function(){return X(!Q)}}),l.a.createElement("br",null),l.a.createElement(r.A,{check:$,color:"primary",rightLabel:"Icon button",className:"pl-10 my-10",onChange:function(){return _(!$)}}),l.a.createElement("br",null),l.a.createElement(r.x,{options:b,value:be,name:"type",className:"pl-10 mt-10",onChange:function(e){return fe(e)}}),l.a.createElement("br",null),l.a.createElement("div",{className:"pa-10"},l.a.createElement(r.d,{color:pe,size:ne,icon:D||$?"search":"",iconAllotted:Q,iconLeft:J,outlined:k,borderType:re,loading:h,disabled:I,block:w,lifted:F,dark:"dark"===be,light:"light"===be,uppercase:E,name:$?null:"Button"})),l.a.createElement(r.h,{icon:"code",iconSize:18,tooltip:"Code"},l.a.createElement(c.a,{language:"jsx",style:s.a},'// Usage examples\nimport React, { useState } from \'react\';\nimport { Button, Switch, Select, Icon, RadioGroup } from \'@assenti/react-ui-components\';\nconst sizes = [\'default\', \'medium\', \'large\'];\nconst colors = [\'primary\', \'info\', \'success\', \'error\', \'secondary\', \'black\'];\nconst borders = [\'default\', \'rounded\', \'smooth\', \'tile\'];\nconst types = [\'dark\', \'light\', \'none\'];\n\nfunction Example() {\n    const [loading, setLoading] = useState(false);\n    const [outlined, setOutlined] = useState(false);\n    const [uppercase, setUppercase] = useState(false);\n    const [block, setBlock] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n    const [icon, setIcon] = useState(false);\n    const [iconLeft, setIconLeft] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [iconAllotted, setIconAllotted] = useState(false);\n    const [iconOnly, setIconOnly] = useState(false);\n    const [size, setSize] = useState(sizes[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [color, setColor] = useState(colors[0]);\n    const [type, setType] = useState(\'\');\n\n    return (\n        <div className="row align-center">\n            <Select\n                items={sizes}\n                prefix={<Icon name="format-size"/>}\n                width={200}\n                label="Button size"\n                color="primary"\n                className="pl-10"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Select\n                items={borders}\n                prefix={<Icon name="shape"/>}\n                width={200}\n                label="Button border type"\n                color="primary"\n                className="pl-10"\n                value={border}\n                onChange={v => setBorder(v)}/>\n            <br/>\n            <Select\n                items={colors}\n                prefix={<Icon name="brush"/>}\n                width={200}\n                label="Button color"\n                color="primary"\n                className="pl-10"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Switch \n                color="primary" \n                check={outlined}\n                rightLabel="Outlined"\n                className="pl-10 my-10"\n                onChange={() => setOutlined(!outlined)}/>\n            \n            <Switch \n                check={uppercase} \n                color="primary"\n                rightLabel="Uppercase" \n                className="pl-10 my-10"\n                onChange={() => setUppercase(!uppercase)}/>\n            <br/>\n            <Switch \n                check={loading} \n                color="primary"\n                rightLabel="Loading" \n                className="pl-10 my-10"\n                onChange={() => setLoading(!loading)}/>\n            <Switch \n                check={disabled} \n                color="primary"\n                rightLabel="Disabled" \n                className="pl-10 my-10"\n                onChange={() => setDisabled(!disabled)}/>\n            <br/>\n            <Switch \n                check={block} \n                color="primary"\n                rightLabel="Block" \n                className="pl-10 my-10"\n                onChange={() => setBlock(!block)}/>\n            <Switch \n                check={lifted} \n                color="primary"\n                rightLabel="Lifted" \n                className="pl-10 my-10"\n                onChange={() => setLifted(!lifted)}/>\n            <br/>\n            <Switch \n                check={icon} \n                color="primary"\n                rightLabel="With icon" \n                className="pl-10 my-10"\n                onChange={() => setIcon(!icon)}/>\n            <Switch \n                check={iconLeft} \n                color="primary"\n                rightLabel="Left icon" \n                className="pl-10 my-10"\n                onChange={() => setIconLeft(!iconLeft)}/>\n            <Switch \n                check={iconAllotted} \n                color="primary"\n                rightLabel="Allotted icon" \n                className="pl-10 my-10"\n                onChange={() => setIconAllotted(!iconAllotted)}/>\n            <br/>\n            <Switch \n                check={iconOnly} \n                color="primary"\n                rightLabel="Icon button" \n                className="pl-10 my-10"\n                onChange={() => setIconOnly(!iconOnly)}/>\n            <br/>\n            <RadioGroup\n                options={types} \n                value={type}\n                name="type"\n                className="pl-10 mt-10" \n                onChange={(value) => setType(value)}/>\n            <br/>\n            <div className="pa-10">\n                <Button\n                    color={color}\n                    size={size}\n                    icon={icon || iconOnly ? \'search\' : \'\'}\n                    iconAllotted={iconAllotted}\n                    iconLeft={iconLeft}\n                    outlined={outlined}\n                    borderType={border}\n                    loading={loading}\n                    disabled={disabled}\n                    block={block}\n                    lifted={lifted}\n                    dark={type === \'dark\' ? true : false}\n                    light={type === \'light\' ? true : false}\n                    uppercase={uppercase}\n                    name={iconOnly ? null : \'Button\'}\n                    />\n            </div>\n        </div>\n    )\n}'))),l.a.createElement(r.b,{tooltip:"Up",setRef:e,dark:!0,size:"medium"}),l.a.createElement("h2",{ref:t},"API"),l.a.createElement(r.B,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:p,index:!0,itemTitles:i}))}}}]);
//# sourceMappingURL=12.chunk.js.map