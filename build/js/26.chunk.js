(this["webpackJsonp@assenti/rui-components"]=this["webpackJsonp@assenti/rui-components"]||[]).push([[26],{303:function(e,t,n){"use strict";n.r(t);var a=n(1),r=n(0),l=n.n(r),o=n(3),i=n(313),c=n(271),u='// Usage examples\nimport React, { useState } from \'react\';\nimport { InputField, Icon, Select, Switch, Button } from \'@assenti/react-ui-components\';\nconst sizes = [\'default\', \'medium\', \'large\'];\nconst colors = [\'primary\', \'info\', \'success\', \'error\'];\nconst borders = [\'default\', \'rounded\', \'smooth\', \'tile\'];\n\nfunction Example() {\n    const [login, setLogin] = useState(\'\');\n    const [password, setPassword] = useState(\'\');\n    const [second, setSecond] = useState(\'\');\n    const [search, setSearch] = useState(\'\');\n    const [amount, setAmount] = useState(0);\n    const [size, setSize] = useState(sizes[0]);\n    const [color, setColor] = useState(colors[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [required, setRequired] = useState(false);\n    const [hint, setHint] = useState(false);\n    const [label, setLabel] = useState(false);\n    const [white, setWhite] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [uppercase, setUppercase] = useState(false);\n\n    return (\n        <div>\n            <Select\n                items={sizes}\n                prefix={<Icon name="format-size"/>}\n                width={200}\n                label="InputField size"\n                color="primary"\n                className="ml-5"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Select\n                items={colors}\n                prefix={<Icon name="brush"/>}\n                width={200}\n                label="InputField color"\n                color="primary"\n                className="ml-5"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Select\n                items={borders}\n                prefix={<Icon name="shape"/>}\n                width={200}\n                label="InputField border type"\n                color="primary"\n                className="ml-5"\n                value={border}\n                onChange={v => setBorder(v)}/>\n            <br/>\n            <Switch \n                color="primary" \n                check={required}\n                rightLabel="Required"\n                className="my-10 ml-5"\n                onChange={() => setRequired(!required)}/>\n            <Switch \n                color="primary" \n                check={label}\n                rightLabel="Label"\n                className="my-10 ml-5"\n                onChange={() => setLabel(!label)}/>\n            <br/>\n            <Switch \n                color="primary" \n                check={hint}\n                rightLabel="Hint"\n                className="my-10 ml-5"\n                onChange={() => setHint(!hint)}/>\n            <Switch \n                color="primary" \n                check={white}\n                rightLabel="White background"\n                className="my-10 ml-5"\n                onChange={() => setWhite(!white)}/>\n            <br/>\n            <Switch \n                check={uppercase} \n                color="primary"\n                rightLabel="Uppercase" \n                className="my-10 ml-5"\n                onChange={() => setUppercase(!uppercase)}/>\n            <Switch \n                check={lifted} \n                color="primary"\n                rightLabel="Lifted" \n                className="my-10 ml-5"\n                onChange={() => setLifted(!lifted)}/>\n            <br/>\n            <InputField\n                label={label ? \'Login\' : \'\'}\n                placeholder="Input your login" \n                value={login}\n                autoComplete\n                hint={hint ? \'I am a hint\' : null}\n                borderType={border}\n                name="login"\n                color={color}\n                lifted={lifted}\n                uppercase={uppercase}\n                whiteBackground={white}\n                width={300}\n                required={required}\n                size={size}\n                onChange={e => setLogin(e.target.value)}/>\n            <InputField\n                label={label ? \'Password\' : \'\'}\n                placeholder="Input your password" \n                value={password}\n                borderType={border}\n                type="password"\n                hint={hint ? \'I am a hint\' : null}\n                color={color}\n                required={required}\n                width={300}\n                lifted={lifted}\n                uppercase={uppercase}\n                size={size}\n                whiteBackground={white}\n                onChange={e => setPassword(e.target.value)}/>\n            <InputField\n                label={label ? \'Amount\' : \'\'}\n                placeholder="Input amount" \n                value={amount}\n                type="number"\n                min={0}\n                required={required}\n                lifted={lifted}\n                uppercase={uppercase}\n                borderType={border}\n                hint={hint ? \'I am a hint\' : null}\n                color={color}\n                prefix={<Icon name="tenge"/>}\n                width={300}\n                whiteBackground={white}\n                size={size}\n                onChange={e => setAmount(e.target.value)}/>\n            <InputField\n                label={label ? \'Login\' : \'\'}\n                placeholder="Input your login" \n                value={second}\n                required={required}\n                borderType={border}\n                lifted={lifted}\n                uppercase={uppercase}\n                hint={hint ? \'I am a hint\' : null}\n                clearable\n                whiteBackground={white}\n                autoFocus\n                onClear={() => setSecond(\'\')} \n                prefix={<Icon name="account"/>}\n                color={color}\n                width={300}\n                size={size}\n                onChange={e => setSecond(e.target.value)}/>\n            <InputField\n                placeholder="Search..." \n                value={search}\n                hint={hint ? \'I am a hint\' : null}\n                color={color}\n                width={300}\n                label={label ? \'Search\' : \'\'}\n                size={size}\n                lifted={lifted}\n                uppercase={uppercase}\n                whiteBackground={white}\n                required={required}\n                borderType={border}\n                prefix={<Icon name="search"/>}\n                suffix={\n                    <Button \n                        name="Search" \n                        color="primary"\n                        size={size} \n                        onClick={() => console.log(search)}/>}\n                onEnter={() => console.log(search)}\n                onChange={e => setSearch(e.target.value)}/>\n        </div>\n    )\n}',s='// Usage examples\nimport React, { useState } from \'react\';\nimport { TextareaField, Icon } from \'@assenti/react-ui-components\';\n\nfunction Example() {\n    const [text, setText] = useState(\'\');\n\n    return (\n        <div>\n            <TextareaField\n                prefix={<Icon name="edit" />}\n                label="Textarea field"\n                placeholder="Textarea field" \n                value={text}\n                maxRows={20}\n                color="primary"\n                width={300}\n                onChange={e => setText(e.target.value)}/>\n            <TextareaField\n                label="Textarea field"\n                placeholder="Textarea field" \n                value={text}\n                maxRows={20}\n                color="info"\n                borderType="tile"\n                rows={4}\n                width={300}\n                onChange={e => setText(e.target.value)}/>\n        </div>\n    )\n}',p=["property","description","default","type","value"],d=[{property:"onChange",description:"Handle input value change (return input change event object)",default:"",type:"function",value:""},{property:"onKeyUp",description:"Invokes on InputField any key pressed (return key change event object)",default:"",type:"function",value:""},{property:"onEnter",description:'Invokes on InputField "Enter" key pressed',default:"",type:"function",value:""},{property:"value",description:"Input value",default:"",type:"string",value:""},{property:"autoComplete",description:"Enable input autocomplete",default:"false",type:"boolean",value:"true | false"},{property:"name",description:"Set name prop for get all inputted values for autocomplete",default:"",type:"string",value:""},{property:"clearable",description:"Allow clear icon on value inputted",default:"false",type:"boolean",value:"true | false"},{property:"onClear",description:"Invokes on clear icon click",default:"",type:"function",value:""},{property:"lifted",description:"Lift up the input field",default:"false",type:"boolean",value:"true | false"},{property:"autoFocus",description:"Set input focus on component mounted",default:"false",type:"boolean",value:"true | false"},{property:"color",description:"Set color of input field from list",default:"",type:"string",value:"primary | info | success | error"},{property:"disabled",description:"Make input field disabled",default:"false",type:"boolean",value:"true | false"},{property:"borderType",description:"Set borders type",default:"",type:"string",value:"tile | smooth | rounded"},{property:"uppercase",description:"Transform text to upper case",default:"false",type:"boolean",value:"true | false"},{property:"size",description:"Set input field size",default:"",type:"string",value:"medium | large"},{property:"prefix",description:"Set prefix",default:"",type:"any",value:""},{property:"suffix",description:"Set suffix",default:"",type:"any",value:""},{property:"width",description:"Set InputField width",default:"",type:"string | number",value:""},{property:"type",description:"Set input type",default:"text",type:"string",value:""},{property:"min",description:'Set min number (has effect with type="number")',default:"",type:"number",value:""},{property:"max",description:'Set max number (has effect with type="number")',default:"",type:"number",value:""},{property:"minLength",description:'Set min length for text (has effect with type="text")',default:"",type:"number",value:""},{property:"maxLength",description:'Set max length for text (has effect with type="text")',default:"",type:"number",value:""},{property:"required",description:"Set input required",default:"false",type:"boolean",value:"true | false"},{property:"readOnly",description:"Set input readOnly",default:"false",type:"boolean",value:"true | false"},{property:"whiteBackground",description:"Set input background color to white",default:"false",type:"boolean",value:"true | false"},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}],m=[{property:"onChange",description:"Handle input value change",default:"",type:"function",value:"return a input change event object"},{property:"value",description:"Input value",default:"",type:"string",value:""},{property:"rows",description:"Set textarea rows count",default:"1",type:"number",value:""},{property:"maxRows",description:"Set maximum textarea rows",default:"10",type:"number",value:""},{property:"clearable",description:"Allow clear icon on value inputted",default:"false",type:"boolean",value:"true | false"},{property:"onClear",description:"Invokes on clear icon click",default:"",type:"function",value:""},{property:"lifted",description:"Lift up the input field",default:"false",type:"boolean",value:"true | false"},{property:"autoFocus",description:"Set input focus on component mounted",default:"false",type:"boolean",value:"true | false"},{property:"color",description:"Set color of input field from list",default:"",type:"string",value:"primary | info | success | error"},{property:"disabled",description:"Make input field disabled",default:"false",type:"boolean",value:"true | false"},{property:"borderType",description:"Set borders type",default:"",type:"string",value:"tile | smooth"},{property:"uppercase",description:"Transform text to upper case",default:"false",type:"boolean",value:"true | false"},{property:"prefix",description:"Set prefix",default:"",type:"any",value:""},{property:"suffix",description:"Set suffix",default:"",type:"any",value:""},{property:"width",description:"Set InputField width",default:"",type:"string | number",value:""},{property:"required",description:"Set input required",default:"false",type:"boolean",value:"true | false"},{property:"readOnly",description:"Set input readOnly",default:"false",type:"boolean",value:"true | false"},{property:"whiteBackground",description:"Set input background color to white",default:"false",type:"boolean",value:"true | false"},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}],f=["default","medium","large"],h=["primary","info","success","error"],y=["default","rounded","smooth","tile"];t.default=function(){var e=Object(r.useState)(""),t=Object(a.a)(e,2),n=t[0],b=t[1],g=Object(r.useState)(""),v=Object(a.a)(g,2),w=v[0],S=v[1],x=Object(r.useState)(""),E=Object(a.a)(x,2),I=E[0],C=E[1],k=Object(r.useState)(""),j=Object(a.a)(k,2),T=j[0],O=j[1],z=Object(r.useState)(0),q=Object(a.a)(z,2),F=q[0],L=q[1],N=Object(r.useState)(""),B=Object(a.a)(N,2),R=B[0],A=B[1],D=Object(r.useState)(f[0]),H=Object(a.a)(D,2),P=H[0],U=H[1],V=Object(r.useState)(h[0]),W=Object(a.a)(V,2),J=W[0],M=W[1],K=Object(r.useState)(y[0]),G=Object(a.a)(K,2),Q=G[0],X=G[1],Y=Object(r.useState)(!1),Z=Object(a.a)(Y,2),$=Z[0],_=Z[1],ee=Object(r.useState)(!1),te=Object(a.a)(ee,2),ne=te[0],ae=te[1],re=Object(r.useState)(!1),le=Object(a.a)(re,2),oe=le[0],ie=le[1],ce=Object(r.useState)(!1),ue=Object(a.a)(ce,2),se=ue[0],pe=ue[1],de=Object(r.useState)(!1),me=Object(a.a)(de,2),fe=me[0],he=me[1],ye=Object(r.useState)(!1),be=Object(a.a)(ye,2),ge=be[0],ve=be[1],we=Object(r.useRef)(),Se=Object(r.useRef)(),xe=Object(r.useRef)();return l.a.createElement("div",{className:"rui-page",ref:xe},l.a.createElement("div",{className:"row align-center space-between"},l.a.createElement("div",{className:"rui-page-title"},"InputField, TextareaField Components"),l.a.createElement("div",{className:"row align-center"},l.a.createElement("div",{onClick:function(){we.current&&we.current.scrollIntoView({behavior:"smooth",block:"center"})},className:"rui-link fz-13 fw-bold mr-10"},"InputField API"),l.a.createElement("div",{onClick:function(){Se.current&&Se.current.scrollIntoView({behavior:"smooth",block:"center"})},className:"rui-link fz-13 fw-bold mr-10"},"TextareaField API"))),l.a.createElement(o.h,{outlined:!0,color:"gray",title:"Input types"},l.a.createElement(o.C,{items:f,prefix:l.a.createElement(o.q,{name:"format-size"}),width:200,label:"InputField size",color:"primary",className:"ml-5",value:P,onChange:function(e){return U(e)}}),l.a.createElement("br",null),l.a.createElement(o.C,{items:h,prefix:l.a.createElement(o.q,{name:"brush"}),width:200,label:"InputField color",color:"primary",className:"ml-5",value:J,onChange:function(e){return M(e)}}),l.a.createElement("br",null),l.a.createElement(o.C,{items:y,prefix:l.a.createElement(o.q,{name:"shape"}),width:200,label:"InputField border type",color:"primary",className:"ml-5",value:Q,onChange:function(e){return X(e)}}),l.a.createElement("br",null),l.a.createElement(o.D,{color:"primary",check:$,rightLabel:"Required",className:"my-10 ml-5",onChange:function(){return _(!$)}}),l.a.createElement(o.D,{color:"primary",check:oe,rightLabel:"Label",className:"my-10 ml-5",onChange:function(){return ie(!oe)}}),l.a.createElement("br",null),l.a.createElement(o.D,{color:"primary",check:ne,rightLabel:"Hint",className:"my-10 ml-5",onChange:function(){return ae(!ne)}}),l.a.createElement(o.D,{color:"primary",check:se,rightLabel:"White background",className:"my-10 ml-5",onChange:function(){return pe(!se)}}),l.a.createElement("br",null),l.a.createElement(o.D,{check:ge,color:"primary",rightLabel:"Uppercase",className:"my-10 ml-5",onChange:function(){return ve(!ge)}}),l.a.createElement(o.D,{check:fe,color:"primary",rightLabel:"Lifted",className:"my-10 ml-5",onChange:function(){return he(!fe)}}),l.a.createElement("br",null),l.a.createElement(o.r,{label:oe?"Login":"",placeholder:"Input your login",value:n,autoComplete:!0,hint:ne?"I am a hint":null,borderType:Q,name:"login",color:J,lifted:fe,uppercase:ge,whiteBackground:se,width:300,required:$,size:P,onChange:function(e){return b(e.target.value)}}),l.a.createElement(o.r,{label:oe?"Password":"",placeholder:"Input your password",value:w,borderType:Q,type:"password",hint:ne?"I am a hint":null,color:J,required:$,width:300,lifted:fe,uppercase:ge,size:P,whiteBackground:se,onChange:function(e){return S(e.target.value)}}),l.a.createElement(o.r,{label:oe?"Amount":"",placeholder:"Input amount",value:F,type:"number",min:0,required:$,lifted:fe,uppercase:ge,borderType:Q,hint:ne?"I am a hint":null,color:J,prefix:l.a.createElement(o.q,{name:"tenge"}),width:300,whiteBackground:se,size:P,onChange:function(e){return L(e.target.value)}}),l.a.createElement(o.r,{label:oe?"Login":"",placeholder:"Input your login",value:I,required:$,borderType:Q,lifted:fe,uppercase:ge,hint:ne?"I am a hint":null,clearable:!0,whiteBackground:se,autoFocus:!0,onClear:function(){return C("")},prefix:l.a.createElement(o.q,{name:"account"}),color:J,width:300,size:P,onChange:function(e){return C(e.target.value)}}),l.a.createElement(o.r,{placeholder:"Search...",value:T,hint:ne?"I am a hint":null,color:J,width:300,label:oe?"Search":"",size:P,lifted:fe,uppercase:ge,whiteBackground:se,required:$,borderType:Q,prefix:l.a.createElement(o.q,{name:"search"}),suffix:l.a.createElement(o.e,{name:"Search",color:"primary",size:P,onClick:function(){return console.log(T)}}),onEnter:function(){return console.log(T)},onChange:function(e){return O(e.target.value)}}),l.a.createElement(o.j,{icon:"code",iconSize:18,extra:l.a.createElement(o.k,{defaultText:"Copy code",text:u,className:"mr-10"}),tooltip:"Show/Hide Code"},l.a.createElement(i.a,{language:"jsx",style:c.a},u))),l.a.createElement("br",null),l.a.createElement(o.h,{outlined:!0,color:"gray",title:"TextareaField Usage"},l.a.createElement(o.H,{prefix:l.a.createElement(o.q,{name:"edit"}),label:"Textarea field",placeholder:"Textarea field",value:R,maxRows:20,color:"primary",width:300,onChange:function(e){return A(e.target.value)}}),l.a.createElement(o.H,{label:"Textarea field",placeholder:"Textarea field",value:R,maxRows:20,color:"info",borderType:"tile",rows:4,width:300,onChange:function(e){return A(e.target.value)}}),l.a.createElement(o.j,{icon:"code",iconSize:18,extra:l.a.createElement(o.k,{defaultText:"Copy code",text:s,className:"mr-10"}),tooltip:"Show/Hide Code"},l.a.createElement(i.a,{language:"jsx",style:c.a},s))),l.a.createElement(o.b,{setRef:xe,dark:!0,size:"medium"}),l.a.createElement("h2",{ref:we},"InputField API"),l.a.createElement(o.E,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:d,index:!0,itemTitles:p}),l.a.createElement("h2",{ref:Se},"TextareaField API"),l.a.createElement(o.E,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:m,index:!0,itemTitles:p}))}}}]);
//# sourceMappingURL=26.chunk.js.map