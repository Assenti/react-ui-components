{"version":3,"sources":["pages/InputsPage.js"],"names":["keys","items","property","description","default","type","value","itemsTextarea","sizes","colors","borders","InputsPage","useState","login","setLogin","password","setPassword","second","setSecond","search","setSearch","amount","setAmount","text","setText","size","setSize","color","setColor","border","setBorder","required","setRequired","hint","setHint","label","setLabel","white","setWhite","lifted","setLifted","uppercase","setUppercase","api","useRef","api2","parent","className","ref","onClick","current","scrollIntoView","behavior","block","outlined","title","prefix","name","width","onChange","v","check","rightLabel","placeholder","autoComplete","borderType","whiteBackground","e","target","min","clearable","autoFocus","onClear","suffix","console","log","onEnter","icon","iconSize","tooltip","language","style","prism","maxRows","rows","setRef","dark","bordered","headers","index","itemTitles"],"mappings":"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","file":"js/24.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { InputField, Icon, Card, Button, Table, Collapse, BackTopBtn, TextareaField, Select, Switch } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst inputTypes = \n`// Usage examples\nimport React, { useState } from 'react';\nimport { InputField, Icon, Select, Switch, Button } from '@assenti/react-ui-components';\nconst sizes = ['default', 'medium', 'large'];\nconst colors = ['primary', 'info', 'success', 'error'];\nconst borders = ['default', 'rounded', 'smooth', 'tile'];\n\nfunction Example() {\n    const [login, setLogin] = useState('');\n    const [password, setPassword] = useState('');\n    const [second, setSecond] = useState('');\n    const [search, setSearch] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [size, setSize] = useState(sizes[0]);\n    const [color, setColor] = useState(colors[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [required, setRequired] = useState(false);\n    const [hint, setHint] = useState(false);\n    const [label, setLabel] = useState(false);\n    const [white, setWhite] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [uppercase, setUppercase] = useState(false);\n\n    return (\n        <div>\n            <Select\n                items={sizes}\n                prefix={<Icon name=\"format-size\"/>}\n                width={200}\n                label=\"InputField size\"\n                color=\"primary\"\n                className=\"ml-5\"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Select\n                items={colors}\n                prefix={<Icon name=\"brush\"/>}\n                width={200}\n                label=\"InputField color\"\n                color=\"primary\"\n                className=\"ml-5\"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Select\n                items={borders}\n                prefix={<Icon name=\"shape\"/>}\n                width={200}\n                label=\"InputField border type\"\n                color=\"primary\"\n                className=\"ml-5\"\n                value={border}\n                onChange={v => setBorder(v)}/>\n            <br/>\n            <Switch \n                color=\"primary\" \n                check={required}\n                rightLabel=\"Required\"\n                className=\"my-10 ml-5\"\n                onChange={() => setRequired(!required)}/>\n            <Switch \n                color=\"primary\" \n                check={label}\n                rightLabel=\"Label\"\n                className=\"my-10 ml-5\"\n                onChange={() => setLabel(!label)}/>\n            <br/>\n            <Switch \n                color=\"primary\" \n                check={hint}\n                rightLabel=\"Hint\"\n                className=\"my-10 ml-5\"\n                onChange={() => setHint(!hint)}/>\n            <Switch \n                color=\"primary\" \n                check={white}\n                rightLabel=\"White background\"\n                className=\"my-10 ml-5\"\n                onChange={() => setWhite(!white)}/>\n            <br/>\n            <Switch \n                check={uppercase} \n                color=\"primary\"\n                rightLabel=\"Uppercase\" \n                className=\"my-10 ml-5\"\n                onChange={() => setUppercase(!uppercase)}/>\n            <Switch \n                check={lifted} \n                color=\"primary\"\n                rightLabel=\"Lifted\" \n                className=\"my-10 ml-5\"\n                onChange={() => setLifted(!lifted)}/>\n            <br/>\n            <InputField\n                label={label ? 'Login' : ''}\n                placeholder=\"Input your login\" \n                value={login}\n                autoComplete\n                hint={hint ? 'I am a hint' : null}\n                borderType={border}\n                name=\"login\"\n                color={color}\n                lifted={lifted}\n                uppercase={uppercase}\n                whiteBackground={white}\n                width={300}\n                required={required}\n                size={size}\n                onChange={e => setLogin(e.target.value)}/>\n            <InputField\n                label={label ? 'Password' : ''}\n                placeholder=\"Input your password\" \n                value={password}\n                borderType={border}\n                type=\"password\"\n                hint={hint ? 'I am a hint' : null}\n                color={color}\n                required={required}\n                width={300}\n                lifted={lifted}\n                uppercase={uppercase}\n                size={size}\n                whiteBackground={white}\n                onChange={e => setPassword(e.target.value)}/>\n            <InputField\n                label={label ? 'Amount' : ''}\n                placeholder=\"Input amount\" \n                value={amount}\n                type=\"number\"\n                min={0}\n                required={required}\n                lifted={lifted}\n                uppercase={uppercase}\n                borderType={border}\n                hint={hint ? 'I am a hint' : null}\n                color={color}\n                prefix={<Icon name=\"tenge\"/>}\n                width={300}\n                whiteBackground={white}\n                size={size}\n                onChange={e => setAmount(e.target.value)}/>\n            <InputField\n                label={label ? 'Login' : ''}\n                placeholder=\"Input your login\" \n                value={second}\n                required={required}\n                borderType={border}\n                lifted={lifted}\n                uppercase={uppercase}\n                hint={hint ? 'I am a hint' : null}\n                clearable\n                whiteBackground={white}\n                autoFocus\n                onClear={() => setSecond('')} \n                prefix={<Icon name=\"account\"/>}\n                color={color}\n                width={300}\n                size={size}\n                onChange={e => setSecond(e.target.value)}/>\n            <InputField\n                placeholder=\"Search...\" \n                value={search}\n                hint={hint ? 'I am a hint' : null}\n                color={color}\n                width={300}\n                label={label ? 'Search' : ''}\n                size={size}\n                lifted={lifted}\n                uppercase={uppercase}\n                whiteBackground={white}\n                required={required}\n                borderType={border}\n                prefix={<Icon name=\"search\"/>}\n                suffix={\n                    <Button \n                        name=\"Search\" \n                        color=\"primary\"\n                        size={size} \n                        onClick={() => console.log(search)}/>}\n                onEnter={() => console.log(search)}\n                onChange={e => setSearch(e.target.value)}/>\n        </div>\n    )\n}`\n\nconst textareaUsage =\n`// Usage examples\nimport React, { useState } from 'react';\nimport { TextareaField, Icon } from '@assenti/react-ui-components';\n\nfunction Example() {\n    const [text, setText] = useState('');\n\n    return (\n        <div>\n            <TextareaField\n                prefix={<Icon name=\"edit\" />}\n                label=\"Textarea field\"\n                placeholder=\"Textarea field\" \n                value={text}\n                maxRows={20}\n                color=\"primary\"\n                width={300}\n                onChange={e => setText(e.target.value)}/>\n            <TextareaField\n                label=\"Textarea field\"\n                placeholder=\"Textarea field\" \n                value={text}\n                maxRows={20}\n                color=\"info\"\n                borderType=\"tile\"\n                rows={4}\n                width={300}\n                onChange={e => setText(e.target.value)}/>\n        </div>\n    )\n}`\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'onChange', \n        description: 'Handle input value change (return input change event object)', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'onKeyUp', \n        description: 'Invokes on InputField any key pressed (return key change event object)', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'onEnter', \n        description: 'Invokes on InputField \"Enter\" key pressed', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'value', \n        description: 'Input value', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'autoComplete', \n        description: 'Enable input autocomplete', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'name', \n        description: 'Set name prop for get all inputted values for autocomplete', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'clearable', \n        description: 'Allow clear icon on value inputted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onClear', \n        description: 'Invokes on clear icon click', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'lifted', \n        description: 'Lift up the input field', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'autoFocus', \n        description: 'Set input focus on component mounted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set color of input field from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error'\n    },\n    { \n        property: 'disabled',\n        description: 'Make input field disabled', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'\n    },\n    { \n        property: 'borderType', \n        description: 'Set borders type', \n        default: '', \n        type: 'string',\n        value: 'tile | smooth | rounded'\n    },\n    { \n        property: 'uppercase',\n        description: 'Transform text to upper case', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'size', \n        description: 'Set input field size',\n        default: '', \n        type: 'string',\n        value: 'medium | large'\n    },\n    { \n        property: 'prefix',\n        description: 'Set prefix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'suffix',\n        description: 'Set suffix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'width',\n        description: 'Set InputField width', \n        default: '', \n        type: 'string | number',\n        value: ''\n    },\n    { \n        property: 'type',\n        description: 'Set input type', \n        default: 'text', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'min',\n        description: 'Set min number (has effect with type=\"number\")', \n        default: '', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'max',\n        description: 'Set max number (has effect with type=\"number\")', \n        default: '', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'minLength',\n        description: 'Set min length for text (has effect with type=\"text\")', \n        default: '', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'maxLength',\n        description: 'Set max length for text (has effect with type=\"text\")', \n        default: '', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'required',\n        description: 'Set input required', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'readOnly',\n        description: 'Set input readOnly', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'whiteBackground',\n        description: 'Set input background color to white', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\nconst itemsTextarea = [\n    { \n        property: 'onChange', \n        description: 'Handle input value change', \n        default: '', \n        type: 'function',\n        value: 'return a input change event object'\n    },\n    { \n        property: 'value', \n        description: 'Input value', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'rows',\n        description: 'Set textarea rows count', \n        default: '1', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'maxRows',\n        description: 'Set maximum textarea rows', \n        default: '10', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'clearable', \n        description: 'Allow clear icon on value inputted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onClear', \n        description: 'Invokes on clear icon click', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'lifted', \n        description: 'Lift up the input field', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'autoFocus', \n        description: 'Set input focus on component mounted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set color of input field from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error'\n    },\n    { \n        property: 'disabled',\n        description: 'Make input field disabled', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'\n    },\n    { \n        property: 'borderType', \n        description: 'Set borders type', \n        default: '', \n        type: 'string',\n        value: 'tile | smooth'\n    },\n    { \n        property: 'uppercase',\n        description: 'Transform text to upper case', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'prefix',\n        description: 'Set prefix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'suffix',\n        description: 'Set suffix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'width',\n        description: 'Set InputField width', \n        default: '', \n        type: 'string | number',\n        value: ''\n    },\n    { \n        property: 'required',\n        description: 'Set input required', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'readOnly',\n        description: 'Set input readOnly', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'whiteBackground',\n        description: 'Set input background color to white', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\nconst sizes = ['default', 'medium', 'large'];\nconst colors = ['primary', 'info', 'success', 'error'];\nconst borders = ['default', 'rounded', 'smooth', 'tile'];\n\nconst InputsPage = () => {\n    const [login, setLogin] = useState('');\n    const [password, setPassword] = useState('');\n    const [second, setSecond] = useState('');\n    const [search, setSearch] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [text, setText] = useState('');\n    const [size, setSize] = useState(sizes[0]);\n    const [color, setColor] = useState(colors[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [required, setRequired] = useState(false);\n    const [hint, setHint] = useState(false);\n    const [label, setLabel] = useState(false);\n    const [white, setWhite] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [uppercase, setUppercase] = useState(false);\n    const api = useRef();\n    const api2 = useRef();\n    const parent = useRef();\n\n    const goToApi = () => {\n        if (api.current) api.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n    }\n\n    const goToApi2 = () => {\n        if (api2.current) api2.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n    }\n\n    return (\n        <div className=\"rui-page\" ref={parent}>\n            <div className=\"row align-center space-between\">\n                <div className=\"rui-page-title\">InputField, TextareaField Components</div>\n                <div className=\"row align-center\">\n                    <div onClick={() => goToApi()} className=\"rui-link fz-13 fw-bold mr-10\">InputField API</div>\n                    <div onClick={() => goToApi2()} className=\"rui-link fz-13 fw-bold mr-10\">TextareaField API</div>\n                </div>\n            </div>\n            <Card outlined color=\"gray\" title=\"Input types\">\n                <Select\n                    items={sizes}\n                    prefix={<Icon name=\"format-size\"/>}\n                    width={200}\n                    label=\"InputField size\"\n                    color=\"primary\"\n                    className=\"ml-5\"\n                    value={size}\n                    onChange={v => setSize(v)}/>\n                <br/>\n                <Select\n                    items={colors}\n                    prefix={<Icon name=\"brush\"/>}\n                    width={200}\n                    label=\"InputField color\"\n                    color=\"primary\"\n                    className=\"ml-5\"\n                    value={color}\n                    onChange={v => setColor(v)}/>\n                <br/>\n                <Select\n                    items={borders}\n                    prefix={<Icon name=\"shape\"/>}\n                    width={200}\n                    label=\"InputField border type\"\n                    color=\"primary\"\n                    className=\"ml-5\"\n                    value={border}\n                    onChange={v => setBorder(v)}/>\n                <br/>\n                <Switch \n                    color=\"primary\" \n                    check={required}\n                    rightLabel=\"Required\"\n                    className=\"my-10 ml-5\"\n                    onChange={() => setRequired(!required)}/>\n                <Switch \n                    color=\"primary\" \n                    check={label}\n                    rightLabel=\"Label\"\n                    className=\"my-10 ml-5\"\n                    onChange={() => setLabel(!label)}/>\n                <br/>\n                <Switch \n                    color=\"primary\" \n                    check={hint}\n                    rightLabel=\"Hint\"\n                    className=\"my-10 ml-5\"\n                    onChange={() => setHint(!hint)}/>\n                <Switch \n                    color=\"primary\" \n                    check={white}\n                    rightLabel=\"White background\"\n                    className=\"my-10 ml-5\"\n                    onChange={() => setWhite(!white)}/>\n                <br/>\n                <Switch \n                    check={uppercase} \n                    color=\"primary\"\n                    rightLabel=\"Uppercase\" \n                    className=\"my-10 ml-5\"\n                    onChange={() => setUppercase(!uppercase)}/>\n                <Switch \n                    check={lifted} \n                    color=\"primary\"\n                    rightLabel=\"Lifted\" \n                    className=\"my-10 ml-5\"\n                    onChange={() => setLifted(!lifted)}/>\n                <br/>\n                <InputField\n                    label={label ? 'Login' : ''}\n                    placeholder=\"Input your login\" \n                    value={login}\n                    autoComplete\n                    hint={hint ? 'I am a hint' : null}\n                    borderType={border}\n                    name=\"login\"\n                    color={color}\n                    lifted={lifted}\n                    uppercase={uppercase}\n                    whiteBackground={white}\n                    width={300}\n                    required={required}\n                    size={size}\n                    onChange={e => setLogin(e.target.value)}/>\n                <InputField\n                    label={label ? 'Password' : ''}\n                    placeholder=\"Input your password\" \n                    value={password}\n                    borderType={border}\n                    type=\"password\"\n                    hint={hint ? 'I am a hint' : null}\n                    color={color}\n                    required={required}\n                    width={300}\n                    lifted={lifted}\n                    uppercase={uppercase}\n                    size={size}\n                    whiteBackground={white}\n                    onChange={e => setPassword(e.target.value)}/>\n                <InputField\n                    label={label ? 'Amount' : ''}\n                    placeholder=\"Input amount\" \n                    value={amount}\n                    type=\"number\"\n                    min={0}\n                    required={required}\n                    lifted={lifted}\n                    uppercase={uppercase}\n                    borderType={border}\n                    hint={hint ? 'I am a hint' : null}\n                    color={color}\n                    prefix={<Icon name=\"tenge\"/>}\n                    width={300}\n                    whiteBackground={white}\n                    size={size}\n                    onChange={e => setAmount(e.target.value)}/>\n                <InputField\n                    label={label ? 'Login' : ''}\n                    placeholder=\"Input your login\" \n                    value={second}\n                    required={required}\n                    borderType={border}\n                    lifted={lifted}\n                    uppercase={uppercase}\n                    hint={hint ? 'I am a hint' : null}\n                    clearable\n                    whiteBackground={white}\n                    autoFocus\n                    onClear={() => setSecond('')} \n                    prefix={<Icon name=\"account\"/>}\n                    color={color}\n                    width={300}\n                    size={size}\n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    placeholder=\"Search...\" \n                    value={search}\n                    hint={hint ? 'I am a hint' : null}\n                    color={color}\n                    width={300}\n                    label={label ? 'Search' : ''}\n                    size={size}\n                    lifted={lifted}\n                    uppercase={uppercase}\n                    whiteBackground={white}\n                    required={required}\n                    borderType={border}\n                    prefix={<Icon name=\"search\"/>}\n                    suffix={\n                        <Button \n                            name=\"Search\" \n                            color=\"primary\"\n                            size={size} \n                            onClick={() => console.log(search)}/>}\n                    onEnter={() => console.log(search)}\n                    onChange={e => setSearch(e.target.value)}/>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {inputTypes}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <br/>\n            <Card outlined color=\"gray\" title=\"TextareaField Usage\">\n                <TextareaField\n                    prefix={<Icon name=\"edit\" />}\n                    label=\"Textarea field\"\n                    placeholder=\"Textarea field\" \n                    value={text}\n                    maxRows={20}\n                    color=\"primary\"\n                    width={300}\n                    onChange={e => setText(e.target.value)}/>\n                <TextareaField\n                    label=\"Textarea field\"\n                    placeholder=\"Textarea field\" \n                    value={text}\n                    maxRows={20}\n                    color=\"info\"\n                    borderType=\"tile\"\n                    rows={4}\n                    width={300}\n                    onChange={e => setText(e.target.value)}/>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {textareaUsage}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <BackTopBtn setRef={parent} dark size=\"medium\"/>\n            <h2 ref={api}>InputField API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index={true}\n                itemTitles={keys}/>\n            <h2 ref={api2}>TextareaField API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={itemsTextarea}\n                index={true}\n                itemTitles={keys}/>\n        </div>\n    )\n}\nexport default InputsPage;"],"sourceRoot":""}