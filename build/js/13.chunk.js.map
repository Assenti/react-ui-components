{"version":3,"sources":["pages/ButtonPage.js"],"names":["keys","items","property","description","default","type","value","usage","sizes","colors","borders","types","ButtonPage","parentRef","useRef","api","useState","loading","setLoading","outlined","setOutlined","uppercase","setUppercase","block","setBlock","disabled","setDisabled","icon","setIcon","iconLeft","setIconLeft","lifted","setLifted","iconAllotted","setIconAllotted","iconOnly","setIconOnly","size","setSize","border","setBorder","color","setColor","setType","className","ref","onClick","current","scrollIntoView","behavior","title","prefix","name","width","label","onChange","v","check","rightLabel","options","borderType","dark","light","iconSize","extra","defaultText","text","tooltip","language","style","prism","setRef","bordered","headers","index","itemTitles"],"mappings":"sMAKMA,EAAO,CAAC,WAAY,cAAe,UAAW,OAAQ,SACtDC,EAAQ,CACV,CACIC,SAAU,UACVC,YAAa,sBACbC,QAAS,GACTC,KAAM,WACNC,MAAO,sCAEX,CACIJ,SAAU,OACVC,YAAa,yCACbC,QAAS,GACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,OACVC,YAAa,kBACbC,QAAS,SACTC,KAAM,SACNC,MAAO,2BAEX,CACIJ,SAAU,SACVC,YAAa,qBACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,QACVC,YAAa,sDACbC,QAAS,GACTC,KAAM,SACNC,MAAO,wDAEX,CACIJ,SAAU,WACVC,YAAa,uBACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,UACVC,YAAa,4CACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,aACVC,YAAa,yBACbC,QAAS,QACTC,KAAM,UACNC,MAAO,2BAEX,CACIJ,SAAU,WACVC,YAAa,yDACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,YACVC,YAAa,+BACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,QACVC,YAAa,mCACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,OACVC,YAAa,kBACbC,QAAS,GACTC,KAAM,SACNC,MAAO,kBACX,CACIJ,SAAU,OACVC,YAAa,0EACbC,QAAS,GACTC,KAAM,SACNC,MAAO,wBAEX,CACIJ,SAAU,WACVC,YAAa,gBACbC,QAAS,OACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,WACVC,YAAa,6CACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,eACVC,YAAa,gDACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,OACVC,YAAa,kDACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,QACVC,YAAa,kDACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,SACVC,YAAa,UACbC,QAAS,GACTC,KAAM,kBACNC,MAAO,IAEX,CACIJ,SAAU,YACVC,YAAa,sCACbC,QAAS,GACTC,KAAM,SACNC,MAAO,KAITC,EAAK,shLAyJLC,EAAQ,CAAC,UAAW,SAAU,SAC9BC,EAAS,CAAC,UAAW,OAAQ,UAAW,QAAS,YAAa,SAC9DC,EAAU,CAAC,UAAW,UAAW,SAAU,QAC3CC,EAAQ,CAAC,OAAQ,QAAS,QA6KjBC,UA3KI,WACf,IAAMC,EAAYC,mBACZC,EAAMD,mBAFS,EAGSE,oBAAS,GAHlB,mBAGdC,EAHc,KAGLC,EAHK,OAIWF,oBAAS,GAJpB,mBAIdG,EAJc,KAIJC,EAJI,OAKaJ,oBAAS,GALtB,mBAKdK,EALc,KAKHC,EALG,OAMKN,oBAAS,GANd,mBAMdO,EANc,KAMPC,EANO,OAOWR,oBAAS,GAPpB,mBAOdS,EAPc,KAOJC,EAPI,OAQGV,oBAAS,GARZ,mBAQdW,EARc,KAQRC,EARQ,OASWZ,oBAAS,GATpB,mBASda,EATc,KASJC,EATI,OAUOd,oBAAS,GAVhB,mBAUde,EAVc,KAUNC,EAVM,OAWmBhB,oBAAS,GAX5B,mBAWdiB,EAXc,KAWAC,EAXA,OAYWlB,oBAAS,GAZpB,mBAYdmB,EAZc,KAYJC,GAZI,QAaGpB,mBAASR,EAAM,IAblB,qBAad6B,GAbc,MAaRC,GAbQ,SAcOtB,mBAASN,EAAQ,IAdxB,qBAcd6B,GAdc,MAcNC,GAdM,SAeKxB,mBAASP,EAAO,IAfrB,qBAedgC,GAfc,MAePC,GAfO,SAgBG1B,mBAAS,IAhBZ,qBAgBdX,GAhBc,MAgBRsC,GAhBQ,MAsBrB,OACI,yBAAKC,UAAU,WAAWC,IAAKhC,GAC3B,yBAAK+B,UAAU,kCACX,yBAAKA,UAAU,kBAAf,oBACA,yBAAKE,QARD,WACR/B,EAAIgC,SAAShC,EAAIgC,QAAQC,eAAe,CAAEC,SAAU,SAAU1B,MAAO,WAO1CqB,UAAU,0BAAjC,QAEJ,kBAAC,IAAD,CAAMzB,UAAQ,EAAC+B,MAAM,gBACjB,kBAAC,IAAD,CACIjD,MAAOO,EACP2C,OAAQ,kBAAC,IAAD,CAAMC,KAAK,gBACnBC,MAAO,IACPC,MAAM,cACNb,MAAM,UACNG,UAAU,QACVtC,MAAO+B,GACPkB,SAAU,SAAAC,GAAC,OAAIlB,GAAQkB,MAC3B,6BACA,kBAAC,IAAD,CACIvD,MAAOS,EACPyC,OAAQ,kBAAC,IAAD,CAAMC,KAAK,UACnBC,MAAO,IACPC,MAAM,qBACNb,MAAM,UACNG,UAAU,QACVtC,MAAOiC,GACPgB,SAAU,SAAAC,GAAC,OAAIhB,GAAUgB,MAC7B,6BACA,kBAAC,IAAD,CACIvD,MAAOQ,EACP0C,OAAQ,kBAAC,IAAD,CAAMC,KAAK,UACnBC,MAAO,IACPC,MAAM,eACNb,MAAM,UACNG,UAAU,QACVtC,MAAOmC,GACPc,SAAU,SAAAC,GAAC,OAAId,GAASc,MAC5B,6BACA,kBAAC,IAAD,CACIf,MAAM,UACNgB,MAAOtC,EACPuC,WAAW,WACXd,UAAU,cACVW,SAAU,kBAAMnC,GAAaD,MACjC,kBAAC,IAAD,CACIsC,MAAOpC,EACPoB,MAAM,UACNiB,WAAW,YACXd,UAAU,cACVW,SAAU,kBAAMjC,GAAcD,MAClC,6BACA,kBAAC,IAAD,CACIoC,MAAOxC,EACPwB,MAAM,UACNiB,WAAW,UACXd,UAAU,cACVW,SAAU,kBAAMrC,GAAYD,MAChC,kBAAC,IAAD,CACIwC,MAAOhC,EACPgB,MAAM,UACNiB,WAAW,WACXd,UAAU,cACVW,SAAU,kBAAM7B,GAAaD,MACjC,6BACA,kBAAC,IAAD,CACIgC,MAAOlC,EACPkB,MAAM,UACNiB,WAAW,QACXd,UAAU,cACVW,SAAU,kBAAM/B,GAAUD,MAC9B,kBAAC,IAAD,CACIkC,MAAO1B,EACPU,MAAM,UACNiB,WAAW,SACXd,UAAU,cACVW,SAAU,kBAAMvB,GAAWD,MAC/B,6BACA,kBAAC,IAAD,CACI0B,MAAO9B,EACPc,MAAM,UACNiB,WAAW,YACXd,UAAU,cACVW,SAAU,kBAAM3B,GAASD,MAC7B,kBAAC,IAAD,CACI8B,MAAO5B,EACPY,MAAM,UACNiB,WAAW,YACXd,UAAU,cACVW,SAAU,kBAAMzB,GAAaD,MACjC,kBAAC,IAAD,CACI4B,MAAOxB,EACPQ,MAAM,UACNiB,WAAW,gBACXd,UAAU,cACVW,SAAU,kBAAMrB,GAAiBD,MACrC,6BACA,kBAAC,IAAD,CACIwB,MAAOtB,EACPM,MAAM,UACNiB,WAAW,cACXd,UAAU,cACVW,SAAU,kBAAMnB,IAAaD,MACjC,6BACA,kBAAC,IAAD,CACIwB,QAAShD,EACTL,MAAOD,GACP+C,KAAK,OACLR,UAAU,cACVW,SAAU,SAACjD,GAAD,OAAWqC,GAAQrC,MACjC,6BACA,yBAAKsC,UAAU,SACX,kBAAC,IAAD,CACIH,MAAOA,GACPJ,KAAMA,GACNV,KAAMA,GAAQQ,EAAW,SAAW,GACpCF,aAAcA,EACdJ,SAAUA,EACVV,SAAUA,EACVyC,WAAYrB,GACZtB,QAASA,EACTQ,SAAUA,EACVF,MAAOA,EACPQ,OAAQA,EACR8B,KAAe,SAATxD,GACNyD,MAAgB,UAATzD,GACPgB,UAAWA,EACX+B,KAAMjB,EAAW,KAAO,YAGhC,kBAAC,IAAD,CACIR,KAAK,OACLoC,SAAU,GACVC,MAAO,kBAAC,IAAD,CAAiBC,YAAY,YAAYC,KAAM3D,EAAOqC,UAAU,UACvEuB,QAAQ,kBACR,kBAAC,IAAD,CAAmBC,SAAS,MAAMC,MAAOC,KACpC/D,KAIb,kBAAC,IAAD,CAAY4D,QAAQ,KAAKI,OAAQ1D,EAAWgD,MAAI,EAACxB,KAAK,WACtD,wBAAIQ,IAAK9B,GAAT,OACA,kBAAC,IAAD,CACIyD,UAAQ,EACRC,QAAS,CAAC,WAAY,cAAe,UAAW,OAAQ,SACxDxE,MAAOA,EACPyE,OAAO,EACPC,WAAY3E","file":"js/13.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Button, Table, Card, Switch, BackTopBtn, Collapse, RadioGroup, Select, Icon, CopyToClipboard } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'onClick', \n        description: 'Handle button click', \n        default: '', \n        type: 'function',\n        value: 'return a button click event object'\n    },\n    { \n        property: 'name', \n        description: 'Set button name (can be set with icon)', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'type', \n        description: 'Set button type', \n        default: 'button', \n        type: 'string',\n        value: 'button | submit | reset'\n    },\n    { \n        property: 'lifted', \n        description: 'Lift up the button', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set background and border color of button from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error | black | secondary'\n    },\n    { \n        property: 'disabled',\n        description: 'Make Button disabled', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'\n    },\n    { \n        property: 'loading',\n        description: 'Activate loading and make Button disabled', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'\n    },\n    { \n        property: 'borderType', \n        description: 'Set Button border type',\n        default: 'false', \n        type: 'boolean',\n        value: 'smooth | rounded | tile'\n    },\n    { \n        property: 'outlined', \n        description: 'Make button background transparent and outline borders', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'\n    },\n    { \n        property: 'uppercase',\n        description: 'Transform text to upper case', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'block', \n        description: 'Fills the parent component width',\n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'size', \n        description: 'Set button size',\n        default: '', \n        type: 'string',\n        value: 'medium | large'},\n    { \n        property: 'icon',\n        description: 'Set icon in a button and give circle shape to it (can be set with name)', \n        default: '', \n        type: 'string',\n        value: 'home | search | etc.'\n    },\n    { \n        property: 'iconSize',\n        description: 'Set icon size', \n        default: '24px', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'iconLeft',\n        description: 'Change icon position to the left from name', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'iconAllotted',\n        description: 'Allot an icon (has effect with outlined prop)', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'dark',\n        description: 'Set dark mode (can not be used with light prop)', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'light',\n        description: 'Set light mode (can not be used with dark prop)', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'setRef', \n        description: 'Set ref', \n        default: '', \n        type: 'React.RefObject',\n        value: ''\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\n\nconst usage = \n`// Usage examples\nimport React, { useState } from 'react';\nimport { Button, Switch, Select, Icon, RadioGroup } from '@assenti/react-ui-components';\nconst sizes = ['default', 'medium', 'large'];\nconst colors = ['primary', 'info', 'success', 'error', 'secondary', 'black'];\nconst borders = ['default', 'rounded', 'smooth', 'tile'];\nconst types = ['dark', 'light', 'none'];\n\nfunction Example() {\n    const [loading, setLoading] = useState(false);\n    const [outlined, setOutlined] = useState(false);\n    const [uppercase, setUppercase] = useState(false);\n    const [block, setBlock] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n    const [icon, setIcon] = useState(false);\n    const [iconLeft, setIconLeft] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [iconAllotted, setIconAllotted] = useState(false);\n    const [iconOnly, setIconOnly] = useState(false);\n    const [size, setSize] = useState(sizes[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [color, setColor] = useState(colors[0]);\n    const [type, setType] = useState('');\n\n    return (\n        <div>\n            <Select\n                items={sizes}\n                prefix={<Icon name=\"format-size\"/>}\n                width={200}\n                label=\"Button size\"\n                color=\"primary\"\n                className=\"pl-10\"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Select\n                items={borders}\n                prefix={<Icon name=\"shape\"/>}\n                width={200}\n                label=\"Button border type\"\n                color=\"primary\"\n                className=\"pl-10\"\n                value={border}\n                onChange={v => setBorder(v)}/>\n            <br/>\n            <Select\n                items={colors}\n                prefix={<Icon name=\"brush\"/>}\n                width={200}\n                label=\"Button color\"\n                color=\"primary\"\n                className=\"pl-10\"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Switch \n                color=\"primary\" \n                check={outlined}\n                rightLabel=\"Outlined\"\n                className=\"pl-10 my-10\"\n                onChange={() => setOutlined(!outlined)}/>\n            \n            <Switch \n                check={uppercase} \n                color=\"primary\"\n                rightLabel=\"Uppercase\" \n                className=\"pl-10 my-10\"\n                onChange={() => setUppercase(!uppercase)}/>\n            <br/>\n            <Switch \n                check={loading} \n                color=\"primary\"\n                rightLabel=\"Loading\" \n                className=\"pl-10 my-10\"\n                onChange={() => setLoading(!loading)}/>\n            <Switch \n                check={disabled} \n                color=\"primary\"\n                rightLabel=\"Disabled\" \n                className=\"pl-10 my-10\"\n                onChange={() => setDisabled(!disabled)}/>\n            <br/>\n            <Switch \n                check={block} \n                color=\"primary\"\n                rightLabel=\"Block\" \n                className=\"pl-10 my-10\"\n                onChange={() => setBlock(!block)}/>\n            <Switch \n                check={lifted} \n                color=\"primary\"\n                rightLabel=\"Lifted\" \n                className=\"pl-10 my-10\"\n                onChange={() => setLifted(!lifted)}/>\n            <br/>\n            <Switch \n                check={icon} \n                color=\"primary\"\n                rightLabel=\"With icon\" \n                className=\"pl-10 my-10\"\n                onChange={() => setIcon(!icon)}/>\n            <Switch \n                check={iconLeft} \n                color=\"primary\"\n                rightLabel=\"Left icon\" \n                className=\"pl-10 my-10\"\n                onChange={() => setIconLeft(!iconLeft)}/>\n            <Switch \n                check={iconAllotted} \n                color=\"primary\"\n                rightLabel=\"Allotted icon\" \n                className=\"pl-10 my-10\"\n                onChange={() => setIconAllotted(!iconAllotted)}/>\n            <br/>\n            <Switch \n                check={iconOnly} \n                color=\"primary\"\n                rightLabel=\"Icon button\" \n                className=\"pl-10 my-10\"\n                onChange={() => setIconOnly(!iconOnly)}/>\n            <br/>\n            <RadioGroup\n                options={types} \n                value={type}\n                name=\"type\"\n                className=\"pl-10 mt-10\" \n                onChange={(value) => setType(value)}/>\n            <br/>\n            <div className=\"pa-10\">\n                <Button\n                    color={color}\n                    size={size}\n                    icon={icon || iconOnly ? 'search' : ''}\n                    iconAllotted={iconAllotted}\n                    iconLeft={iconLeft}\n                    outlined={outlined}\n                    borderType={border}\n                    loading={loading}\n                    disabled={disabled}\n                    block={block}\n                    lifted={lifted}\n                    dark={type === 'dark' ? true : false}\n                    light={type === 'light' ? true : false}\n                    uppercase={uppercase}\n                    name={iconOnly ? null : 'Button'}\n                    />\n            </div>\n        </div>\n    )\n}`\n\nconst sizes = ['default', 'medium', 'large'];\nconst colors = ['primary', 'info', 'success', 'error', 'secondary', 'black'];\nconst borders = ['default', 'rounded', 'smooth', 'tile'];\nconst types = ['dark', 'light', 'none'];\n\nconst ButtonPage = () => {\n    const parentRef = useRef();\n    const api = useRef();\n    const [loading, setLoading] = useState(false);\n    const [outlined, setOutlined] = useState(false);\n    const [uppercase, setUppercase] = useState(false);\n    const [block, setBlock] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n    const [icon, setIcon] = useState(false);\n    const [iconLeft, setIconLeft] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [iconAllotted, setIconAllotted] = useState(false);\n    const [iconOnly, setIconOnly] = useState(false);\n    const [size, setSize] = useState(sizes[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [color, setColor] = useState(colors[0]);\n    const [type, setType] = useState('');\n\n    const goToApi = () => {\n        if (api.current) api.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\n    }\n\n    return (\n        <div className=\"rui-page\" ref={parentRef}>\n            <div className=\"row align-center space-between\">\n                <div className=\"rui-page-title\">Button Component</div>\n                <div onClick={goToApi} className=\"rui-link fz-13 fw-bold\">API</div>\n            </div>\n            <Card outlined title=\"Button usage\">\n                <Select\n                    items={sizes}\n                    prefix={<Icon name=\"format-size\"/>}\n                    width={200}\n                    label=\"Button size\"\n                    color=\"primary\"\n                    className=\"pl-10\"\n                    value={size}\n                    onChange={v => setSize(v)}/>\n                <br/>\n                <Select\n                    items={borders}\n                    prefix={<Icon name=\"shape\"/>}\n                    width={200}\n                    label=\"Button border type\"\n                    color=\"primary\"\n                    className=\"pl-10\"\n                    value={border}\n                    onChange={v => setBorder(v)}/>\n                <br/>\n                <Select\n                    items={colors}\n                    prefix={<Icon name=\"brush\"/>}\n                    width={200}\n                    label=\"Button color\"\n                    color=\"primary\"\n                    className=\"pl-10\"\n                    value={color}\n                    onChange={v => setColor(v)}/>\n                <br/>\n                <Switch \n                    color=\"primary\" \n                    check={outlined}\n                    rightLabel=\"Outlined\"\n                    className=\"pl-10 my-10\"\n                    onChange={() => setOutlined(!outlined)}/>\n                <Switch \n                    check={uppercase} \n                    color=\"primary\"\n                    rightLabel=\"Uppercase\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setUppercase(!uppercase)}/>\n                <br/>\n                <Switch \n                    check={loading} \n                    color=\"primary\"\n                    rightLabel=\"Loading\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setLoading(!loading)}/>\n                <Switch \n                    check={disabled} \n                    color=\"primary\"\n                    rightLabel=\"Disabled\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setDisabled(!disabled)}/>\n                <br/>\n                <Switch \n                    check={block} \n                    color=\"primary\"\n                    rightLabel=\"Block\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setBlock(!block)}/>\n                <Switch \n                    check={lifted} \n                    color=\"primary\"\n                    rightLabel=\"Lifted\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setLifted(!lifted)}/>\n                <br/>\n                <Switch \n                    check={icon} \n                    color=\"primary\"\n                    rightLabel=\"With icon\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setIcon(!icon)}/>\n                <Switch \n                    check={iconLeft} \n                    color=\"primary\"\n                    rightLabel=\"Left icon\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setIconLeft(!iconLeft)}/>\n                <Switch \n                    check={iconAllotted} \n                    color=\"primary\"\n                    rightLabel=\"Allotted icon\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setIconAllotted(!iconAllotted)}/>\n                <br/>\n                <Switch \n                    check={iconOnly} \n                    color=\"primary\"\n                    rightLabel=\"Icon button\" \n                    className=\"pl-10 my-10\"\n                    onChange={() => setIconOnly(!iconOnly)}/>\n                <br/>\n                <RadioGroup\n                    options={types} \n                    value={type}\n                    name=\"type\"\n                    className=\"pl-10 mt-10\" \n                    onChange={(value) => setType(value)}/>\n                <br/>\n                <div className=\"pa-10\">\n                    <Button\n                        color={color}\n                        size={size}\n                        icon={icon || iconOnly ? 'search' : ''}\n                        iconAllotted={iconAllotted}\n                        iconLeft={iconLeft}\n                        outlined={outlined}\n                        borderType={border}\n                        loading={loading}\n                        disabled={disabled}\n                        block={block}\n                        lifted={lifted}\n                        dark={type === 'dark' ? true : false}\n                        light={type === 'light' ? true : false}\n                        uppercase={uppercase}\n                        name={iconOnly ? null : 'Button'}\n                        />\n                </div>\n                <Collapse \n                    icon=\"code\" \n                    iconSize={18}\n                    extra={<CopyToClipboard defaultText=\"Copy code\" text={usage} className=\"mr-10\"/>} \n                    tooltip=\"Show/Hide Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {usage}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <BackTopBtn tooltip=\"Up\" setRef={parentRef} dark size=\"medium\"/>\n            <h2 ref={api}>API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index={true}\n                itemTitles={keys}/>\n        </div>\n    )\n}\nexport default ButtonPage;"],"sourceRoot":""}