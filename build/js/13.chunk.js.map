{"version":3,"sources":["pages/CheckboxPage.js"],"names":["keys","items","property","description","default","type","value","colors","sizes","CheckboxPage","useState","check","setCheck","label","setLabel","color","setColor","size","setSize","className","outlined","title","prefix","name","width","onChange","v","rightLabel","checked","icon","iconSize","tooltip","language","style","prism","bordered","headers","index","itemTitles"],"mappings":"sMAKMA,EAAO,CAAC,WAAY,cAAe,UAAW,OAAQ,SACtDC,EAAQ,CACV,CACIC,SAAU,UACVC,YAAa,4BACbC,QAAS,GACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,WACVC,YAAa,yBACbC,QAAS,GACTC,KAAM,WACNC,MAAO,IAEX,CACIJ,SAAU,UACVC,YAAa,yBACbC,QAAS,QACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,QACVC,YAAa,kCACbC,QAAS,GACTC,KAAM,SACNC,MAAO,oCAEX,CACIJ,SAAU,OACVC,YAAa,oBACbC,QAAS,GACTC,KAAM,SACNC,MAAO,kBAEX,CACIJ,SAAU,QACVC,YAAa,qBACbC,QAAS,GACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,YACVC,YAAa,sCACbC,QAAS,GACTC,KAAM,SACNC,MAAO,KAwDTC,EAAS,CAAC,YAAa,UAAW,OAAQ,UAAW,SACrDC,EAAQ,CAAC,UAAW,SAAU,SA6DrBC,UA3DM,WAAO,IAAD,EACGC,oBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,OAEGF,oBAAS,GAFZ,mBAEhBG,EAFgB,KAETC,EAFS,OAGGJ,mBAASH,EAAO,IAHnB,mBAGhBQ,EAHgB,KAGTC,EAHS,OAICN,mBAASF,EAAM,IAJhB,mBAIhBS,EAJgB,KAIVC,EAJU,KAMvB,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,kBAAf,sBACA,kBAAC,IAAD,CAAMC,UAAQ,EAACC,MAAM,kBACjB,kBAAC,IAAD,CACIpB,MAAOM,EACPe,OAAQ,kBAAC,IAAD,CAAMC,KAAK,UACnBC,MAAO,IACPX,MAAM,iBACNE,MAAM,UACNT,MAAOS,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAASU,MAC5B,6BACA,kBAAC,IAAD,CACIzB,MAAOO,EACPc,OAAQ,kBAAC,IAAD,CAAMC,KAAK,gBACnBC,MAAO,IACPX,MAAM,gBACNE,MAAM,UACNT,MAAOW,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,MAC3B,6BACA,kBAAC,IAAD,CACIX,MAAM,UACNJ,MAAOE,EACPc,WAAW,QACXR,UAAU,QACVM,SAAU,kBAAMX,GAAUD,MAC9B,6BACA,yBAAKM,UAAU,SACX,kBAAC,IAAD,CACIS,QAASjB,EACTI,MAAOA,EACPE,KAAMA,EACNJ,MAAOA,EAAQ,WAAa,KAC5BY,SAAU,kBAAMb,GAAUD,OAElC,kBAAC,IAAD,CAAUkB,KAAK,OAAOC,SAAU,GAAIC,QAAQ,QACxC,kBAAC,IAAD,CAAmBC,SAAS,MAAMC,MAAOC,KAnGlD,spDAwGC,mCACA,kBAAC,IAAD,CACIC,UAAQ,EACRC,QAAS,CAAC,WAAY,cAAe,UAAW,OAAQ,SACxDnC,MAAOA,EACPoC,OAAK,EACLC,WAAYtC","file":"js/13.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Checkbox, Table, Collapse, Card, Select, Icon, Switch } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'checked', \n        description: 'define the checkbox state', \n        default: '', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onChange', \n        description: 'handle checkbox change', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'disable', \n        description: 'Make checkbox disabled', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set color of checkbox from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error'\n    },\n    { \n        property: 'size', \n        description: 'Set checkbox size', \n        default: '', \n        type: 'string',\n        value: 'medium | large'\n    },\n    { \n        property: 'label', \n        description: 'Set checkbox label', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'className', \n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\n\nconst usage =\n`// Usage examples\nimport React, { useState } from 'react';\nimport { Checkbox, Select, Icon, Switch } from '@assenti/rui-components';\nconst colors = ['secondary', 'primary', 'info', 'success', 'error'];\nconst sizes = ['default', 'medium', 'large'];\n\nfunction Example() {\n    const [check, setCheck] = useState(true);\n    const [label, setLabel] = useState(false);\n    const [color, setColor] = useState(colors[1]);\n    const [size, setSize] = useState(sizes[0]);\n\n    return (\n        <div>\n            <Select\n                items={colors}\n                prefix={<Icon name=\"brush\"/>}\n                width={200}\n                label=\"Checkbox color\"\n                color=\"primary\"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Select\n                items={sizes}\n                prefix={<Icon name=\"format-size\"/>}\n                width={200}\n                label=\"Checkbox size\"\n                color=\"primary\"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Switch \n                color=\"primary\" \n                check={label}\n                rightLabel=\"Label\"\n                className=\"my-10\"\n                onChange={() => setLabel(!label)}/>\n            <br/>\n            <div className=\"pa-10\">\n                <Checkbox\n                    checked={check}\n                    color={color}\n                    size={size}\n                    label={label ? 'Checkbox' : null} \n                    onChange={() => setCheck(!check)}/>\n            </div>\n        </div>\n    )\n}`\n\nconst colors = ['secondary', 'primary', 'info', 'success', 'error'];\nconst sizes = ['default', 'medium', 'large'];\n\nconst CheckboxPage = () => {\n    const [check, setCheck] = useState(true);\n    const [label, setLabel] = useState(false);\n    const [color, setColor] = useState(colors[1]);\n    const [size, setSize] = useState(sizes[0]);\n\n    return (\n        <div className=\"rui-page\">\n            <div className=\"rui-page-title\">Checkbox Component</div>\n            <Card outlined title=\"Checkbox usage\">\n                <Select\n                    items={colors}\n                    prefix={<Icon name=\"brush\"/>}\n                    width={200}\n                    label=\"Checkbox color\"\n                    color=\"primary\"\n                    value={color}\n                    onChange={v => setColor(v)}/>\n                <br/>\n                <Select\n                    items={sizes}\n                    prefix={<Icon name=\"format-size\"/>}\n                    width={200}\n                    label=\"Checkbox size\"\n                    color=\"primary\"\n                    value={size}\n                    onChange={v => setSize(v)}/>\n                <br/>\n                <Switch \n                    color=\"primary\" \n                    check={label}\n                    rightLabel=\"Label\"\n                    className=\"my-10\"\n                    onChange={() => setLabel(!label)}/>\n                <br/>\n                <div className=\"pa-10\">\n                    <Checkbox\n                        checked={check}\n                        color={color}\n                        size={size}\n                        label={label ? 'Checkbox' : null} \n                        onChange={() => setCheck(!check)}/>\n                </div>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {usage}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <h2>API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index\n                itemTitles={keys}/>\n        </div>\n    )\n}\nexport default CheckboxPage;"],"sourceRoot":""}