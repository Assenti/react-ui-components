{"version":3,"sources":["pages/DialogPage.js"],"names":["keys","items","property","description","default","type","value","DialogPage","useState","dialog","setDialog","actionImitation","a","Promise","resolve","setTimeout","className","outlined","title","color","name","onClick","onCancel","onConfirm","icon","iconColor","titleColor","visible","iconSize","tooltip","language","style","prism","bordered","headers","index","itemTitles"],"mappings":"+NAwCMA,EAAO,CAAC,WAAY,cAAe,UAAW,OAAQ,SACtDC,EAAQ,CACV,CACIC,SAAU,UACVC,YAAa,2BACbC,QAAS,GACTC,KAAM,UACNC,MAAO,gBAEX,CACIJ,SAAU,YACVC,YAAa,iCACbC,QAAS,GACTC,KAAM,oBACNC,MAAO,IAEX,CACIJ,SAAU,WACVC,YAAa,gCACbC,QAAS,GACTC,KAAM,WACNC,MAAO,IAEX,CACIJ,SAAU,cACVC,YAAa,mBACbC,QAAS,UACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,kBACVC,YAAa,2BACbC,QAAS,UACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,aACVC,YAAa,kBACbC,QAAS,SACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,iBACVC,YAAa,0BACbC,QAAS,YACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,QACVC,YAAa,mBACbC,QAAS,GACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,cACVC,YAAa,yBACbC,QAAS,GACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,OACVC,YAAa,kBACbC,QAAS,GACTC,KAAM,SACNC,MAAO,IAEX,CACIJ,SAAU,aACVC,YAAa,kBACbC,QAAS,OACTC,KAAM,SACNC,MAAO,mCAEX,CACIJ,SAAU,YACVC,YAAa,iBACbC,QAAS,OACTC,KAAM,SACNC,MAAO,mCAEX,CACIJ,SAAU,OACVC,YAAa,sBACbC,QAAS,QACTC,KAAM,UACNC,MAAO,iBAiDAC,UA7CI,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACdC,EADc,KACNC,EADM,KAGfC,EAAe,uCAAG,sBAAAC,EAAA,+EACb,IAAIC,QAAJ,uCAAY,WAAOC,GAAP,SAAAF,EAAA,sDACfG,YAAW,WACPD,MACD,MAHY,2CAAZ,wDADa,2CAAH,qDAQrB,OACI,yBAAKE,UAAU,YACX,yBAAKA,UAAU,kBAAf,oBACA,kBAAC,IAAD,CAAMC,UAAQ,EAACC,MAAM,eACjB,kBAAC,IAAD,CACIC,MAAM,QACNC,KAAK,iBACLC,QAAS,kBAAMX,GAAU,MAC7B,kBAAC,IAAD,CACIY,SAAU,kBAAMZ,GAAU,IAC1Ba,UAAWZ,EACXa,KAAK,QACLC,UAAU,MACVC,WAAW,MACXC,QAASlB,EACTS,MAAM,SACNf,YAAY,kBAChB,kBAAC,IAAD,CAAUqB,KAAK,OAAOI,SAAU,GAAIC,QAAQ,QACxC,kBAAC,IAAD,CAAmBC,SAAS,MAAMC,MAAOC,KA/JlD,45BAoKC,mCACA,kBAAC,IAAD,CACIC,UAAQ,EACRC,QAAS,CAAC,WAAY,cAAe,UAAW,OAAQ,SACxDjC,MAAOA,EACPkC,OAAO,EACPC,WAAYpC","file":"js/13.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Dialog, Button, Card, Collapse, Table } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst usage =\n`// Usage examples\nimport React, { useState } from 'react';\nimport { Button, Dialog } from '@assenti/rui-components';\n\nfunction Example() {\n    const [dialog, setDialog] = useState(false);\n\n    const actionImitation = async () => {\n        return new Promise(async (resolve) => {\n            setTimeout(() => {\n                resolve()\n            }, 1500)\n        })\n    }\n\n    return (\n        <div>\n            <Button\n                color=\"error\"\n                name=\"Delete account\"\n                onClick={() => setDialog(true)}/>\n            <Dialog\n                onCancel={() => setDialog(false)}\n                onConfirm={actionImitation}\n                icon=\"alert\"\n                iconColor=\"red\"\n                titleColor=\"red\" \n                visible={dialog} \n                title=\"Delete\"\n                description=\"Are you sure?\"/>\n        </div>\n    )\n}`\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'visible', \n        description: 'Set Dialog visible state', \n        default: '', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onConfirm', \n        description: 'Ivokes on confirm button click', \n        default: '', \n        type: 'promised function',\n        value: ''\n    },\n    { \n        property: 'onCancel', \n        description: 'Ivokes on cancel button click', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'confirmText', \n        description: 'Set confirm text', \n        default: 'Confirm', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'confirmBtnColor', \n        description: 'Set confirm button color', \n        default: 'primary', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'cancelText', \n        description: 'Set cancel text', \n        default: 'Cancel', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'cancelBtnColor', \n        description: 'Set cancel button color', \n        default: 'secondary', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'title', \n        description: 'Set Dialog title', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'description', \n        description: 'Set Dialog description', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'icon', \n        description: 'Set Dialog icon', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'titleColor', \n        description: 'Set title color', \n        default: 'gray', \n        type: 'string',\n        value: 'hex | rgb() | css preset colors'\n    },\n    { \n        property: 'iconColor', \n        description: 'Set icon color', \n        default: 'gray', \n        type: 'string',\n        value: 'hex | rgb() | css preset colors'\n    },\n    { \n        property: 'dark', \n        description: 'Set modal dark mode', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    }\n]\n\nconst DialogPage = () => {\n    const [dialog, setDialog] = useState(false);\n\n    const actionImitation = async () => {\n        return new Promise(async (resolve) => {\n            setTimeout(() => {\n                resolve()\n            }, 1500)\n        })\n    }\n\n    return (\n        <div className=\"rui-page\">\n            <div className=\"rui-page-title\">Dialog Component</div>\n            <Card outlined title=\"Modal usage\">\n                <Button\n                    color=\"error\"\n                    name=\"Delete account\"\n                    onClick={() => setDialog(true)}/>\n                <Dialog\n                    onCancel={() => setDialog(false)}\n                    onConfirm={actionImitation}\n                    icon=\"alert\"\n                    iconColor=\"red\"\n                    titleColor=\"red\" \n                    visible={dialog} \n                    title=\"Delete\"\n                    description=\"Are you sure?\"/>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {usage}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <h2>API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index={true}\n                itemTitles={keys}/>\n        </div>\n    )\n}\n\nexport default DialogPage;\n"],"sourceRoot":""}