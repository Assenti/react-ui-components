(this["webpackJsonp@assenti/rui-components"]=this["webpackJsonp@assenti/rui-components"]||[]).push([[19],{291:function(e,t,n){"use strict";n.r(t);var a=n(2),r=n(0),l=n.n(r),o=n(4),i=n(293),u=n(265),p=["property","description","default","type","value"],c=[{property:"onChange",description:"Handle input value change",default:"",type:"function",value:"return a input change event object"},{property:"value",description:"Input value",default:"",type:"string",value:""},{property:"clearable",description:"Allow clear icon on value inputted",default:"false",type:"boolean",value:"true | false"},{property:"onClear",description:"Invokes on clear icon click",default:"",type:"function",value:""},{property:"lifted",description:"Lift up the input field",default:"false",type:"boolean",value:"true | false"},{property:"autoFocus",description:"Set input focus on component mounted",default:"false",type:"boolean",value:"true | false"},{property:"color",description:"Set color of input field from list",default:"",type:"string",value:"primary | info | success | error"},{property:"disabled",description:"Make input field disabled",default:"false",type:"boolean",value:"true | false"},{property:"rounded",description:"Make border radius rounded",default:"false",type:"boolean",value:"true | false"},{property:"smooth",description:"Set input field borders more smooth",default:"false",type:"boolean",value:"true | false"},{property:"uppercase",description:"Transform text to upper case",default:"false",type:"boolean",value:"true | false"},{property:"size",description:"Set input field size",default:"",type:"string",value:"medium | large"},{property:"prefix",description:"Set prefix",default:"",type:"any",value:""},{property:"suffix",description:"Set suffix",default:"",type:"any",value:""},{property:"width",description:"Set InputField width",default:"",type:"string | number",value:""},{property:"type",description:"Set input type",default:"text",type:"string",value:""},{property:"required",description:"Set input required",default:"false",type:"boolean",value:"true | false"},{property:"readOnly",description:"Set input readOnly",default:"false",type:"boolean",value:"true | false"},{property:"whiteBackground",description:"Set input background color to white",default:"false",type:"boolean",value:"true | false"},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}],d=[{property:"onChange",description:"Handle input value change",default:"",type:"function",value:"return a input change event object"},{property:"value",description:"Input value",default:"",type:"string",value:""},{property:"rows",description:"Set textarea rows count",default:"1",type:"number",value:""},{property:"maxRows",description:"Set maximum textarea rows",default:"10",type:"number",value:""},{property:"clearable",description:"Allow clear icon on value inputted",default:"false",type:"boolean",value:"true | false"},{property:"onClear",description:"Invokes on clear icon click",default:"",type:"function",value:""},{property:"lifted",description:"Lift up the input field",default:"false",type:"boolean",value:"true | false"},{property:"autoFocus",description:"Set input focus on component mounted",default:"false",type:"boolean",value:"true | false"},{property:"color",description:"Set color of input field from list",default:"",type:"string",value:"primary | info | success | error"},{property:"disabled",description:"Make input field disabled",default:"false",type:"boolean",value:"true | false"},{property:"rounded",description:"Make border radius rounded",default:"false",type:"boolean",value:"true | false"},{property:"smooth",description:"Set input field borders more smooth",default:"false",type:"boolean",value:"true | false"},{property:"uppercase",description:"Transform text to upper case",default:"false",type:"boolean",value:"true | false"},{property:"prefix",description:"Set prefix",default:"",type:"any",value:""},{property:"suffix",description:"Set suffix",default:"",type:"any",value:""},{property:"width",description:"Set InputField width",default:"",type:"string | number",value:""},{property:"required",description:"Set input required",default:"false",type:"boolean",value:"true | false"},{property:"readOnly",description:"Set input readOnly",default:"false",type:"boolean",value:"true | false"},{property:"whiteBackground",description:"Set input background color to white",default:"false",type:"boolean",value:"true | false"},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}];t.default=function(){var e=Object(r.useState)(""),t=Object(a.a)(e,2),n=t[0],s=t[1],f=Object(r.useState)(""),m=Object(a.a)(f,2),h=m[0],v=m[1],x=Object(r.useState)(""),y=Object(a.a)(x,2),b=y[0],g=y[1],w=Object(r.useState)(""),S=Object(a.a)(w,2),C=S[0],E=S[1],I=Object(r.createRef)(),k=Object(r.createRef)();return l.a.createElement("div",{className:"rui-page",ref:k},l.a.createElement("div",{className:"row align-center space-between"},l.a.createElement("div",{className:"rui-page-title"},"InputField, TextareaField Components"),l.a.createElement("div",{onClick:function(){I.current&&I.current.scrollIntoView({behavior:"smooth",block:"center"})},className:"rui-link fz-13 fw-bold mr-10"},"API")),l.a.createElement(o.e,{outlined:!0,color:"primary",title:"Input types"},l.a.createElement("div",{className:"row wrap"},l.a.createElement("div",{className:"col"},l.a.createElement(o.l,{label:"Standard input with clear button and hint",placeholder:"Input a text",value:n,color:"primary",width:"300px",hint:"Some hint",onClear:function(){return s("")},onChange:function(e){return s(e.target.value)}}),l.a.createElement(o.l,{label:"Smooth input with prefix, clear button with lifted prop",placeholder:"Input a text",value:n,smooth:!0,lifted:!0,color:"primary",prefix:l.a.createElement(o.k,{name:"search"}),width:"300px",onClear:function(){return s("")},onChange:function(e){return s(e.target.value)}}),l.a.createElement(o.l,{label:"Rounded input field with prefix, suffix and clear button",placeholder:"Defaul size input field",value:n,rounded:!0,clearable:!0,autoFocus:!0,onClear:function(){return s("")},prefix:l.a.createElement(o.k,{name:"search"}),suffix:l.a.createElement(o.k,{name:"edit"}),color:"info",width:"300px",onChange:function(e){return s(e.target.value)}}),l.a.createElement(o.l,{label:"Disabled input field",placeholder:"Defaul size rounded input field",value:n,rounded:!0,disabled:!0,prefix:l.a.createElement(o.k,{name:"account"}),color:"info",width:"300px",onClear:function(){return s("")},onChange:function(e){return s(e.target.value)}})),l.a.createElement("div",{className:"col"},l.a.createElement(o.l,{label:"Standard input field with suffix button",placeholder:"Search...",value:b,color:"primary",width:"100%",prefix:l.a.createElement(o.k,{name:"search"}),suffix:l.a.createElement(o.c,{name:"Search",color:"primary",onClick:function(){}}),onClear:function(){return g("")},onChange:function(e){return g(e.target.value)}}),l.a.createElement(o.l,{label:"Smooth input field with suffix button",placeholder:"Search...",value:b,color:"primary",width:"100%",smooth:!0,prefix:l.a.createElement(o.k,{name:"search"}),suffix:l.a.createElement(o.c,{name:"Search",color:"primary",onClick:function(){}}),onClear:function(){return g("")},onChange:function(e){return g(e.target.value)}}),l.a.createElement(o.l,{label:"Rounded input field with suffix button",placeholder:"Search...",value:b,color:"error",width:"100%",rounded:!0,prefix:l.a.createElement(o.k,{name:"search"}),suffix:l.a.createElement(o.c,{name:"Search",color:"error",onClick:function(){}}),onClear:function(){return g("")},onChange:function(e){return g(e.target.value)}}))),l.a.createElement(o.g,{icon:"code",iconSize:18,tooltip:"Code"},l.a.createElement(i.a,{language:"jsx",style:u.a},'// Usage examples\nimport React, { useState } from \'react\';\nimport { InputField } from \'@assenti/react-ui-components\';\n\nfunction Example() {\n    const [first, setFirst] = useState(\'\');\n    const [second, setSecond] = useState(\'\');\n\n    return (\n        <div className="row wrap">\n            <div className="col">\n                <InputField\n                    label="Standard input with clear button and hint"\n                    placeholder="Input a text" \n                    value={first}\n                    color="primary"\n                    width="300px"\n                    hint="Some hint"\n                    onClear={() => setFirst(\'\')} \n                    onChange={e => setFirst(e.target.value)}/>\n                <InputField\n                    label="Smooth input with prefix, clear button with lifted prop"\n                    placeholder="Input a text" \n                    value={first}\n                    smooth\n                    lifted\n                    color="primary"\n                    prefix={<Icon name="search"/>}\n                    width="300px"\n                    onClear={() => setFirst(\'\')} \n                    onChange={e => setFirst(e.target.value)}/>\n                <InputField\n                    label="Rounded input field with prefix, suffix and clear button"\n                    placeholder="Defaul size input field" \n                    value={first}\n                    rounded\n                    clearable\n                    autoFocus\n                    onClear={() => setFirst(\'\')} \n                    prefix={<Icon name="search"/>}\n                    suffix={<Icon name="edit"/>}\n                    color="info"\n                    width="300px"\n                    onChange={e => setFirst(e.target.value)}/>\n                <InputField\n                    label="Disabled input field"\n                    placeholder="Defaul size rounded input field" \n                    value={first}\n                    rounded\n                    disabled\n                    prefix={<Icon name="account"/>}\n                    color="info"\n                    width="300px"\n                    onClear={() => setFirst(\'\')} \n                    onChange={e => setFirst(e.target.value)}/>\n            </div>\n            <div className="col">\n                <InputField\n                    label="Standard input field with suffix button"\n                    placeholder="Search..." \n                    value={second}\n                    color="primary"\n                    width="100%"\n                    prefix={<Icon name="search"/>}\n                    suffix={<Button name="Search" color="primary" onClick={() => {}}/>}\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    label="Smooth input field with suffix button"\n                    placeholder="Search..." \n                    value={second}\n                    color="primary"\n                    width="100%"\n                    smooth\n                    prefix={<Icon name="search"/>}\n                    suffix={<Button name="Search" color="primary" onClick={() => {}}/>}\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    label="Rounded input field with suffix button"\n                    placeholder="Search..." \n                    value={second}\n                    color="error"\n                    width="100%"\n                    rounded\n                    prefix={<Icon name="search"/>}\n                    suffix={<Button name="Search" color="error" onClick={() => {}}/>}\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n            </div>\n        </div>\n    )\n}'))),l.a.createElement("br",null),l.a.createElement(o.e,{outlined:!0,color:"primary",title:"Input sizes"},l.a.createElement("div",{className:"row"},l.a.createElement("div",{className:"col"},l.a.createElement(o.l,{color:"info",placeholder:"777 777 77 77",value:h,label:"Default input field with label and prefix",width:"300px",prefix:l.a.createElement(o.k,{name:"smartphone"}),onClear:function(){return v("")},onChange:function(e){return v(e.target.value)}}),l.a.createElement(o.l,{size:"medium",color:"info",label:"Medium input field with label and prefix",prefix:l.a.createElement(o.k,{name:"smartphone"}),placeholder:"777 777 77 77",value:h,width:"300px",onClear:function(){return v("")},onChange:function(e){return v(e.target.value)}}),l.a.createElement(o.l,{size:"large",color:"info",label:"Large input field with label and prefix",prefix:l.a.createElement(o.k,{name:"smartphone"}),placeholder:"777 777 77 77 ",value:h,width:"300px",onClear:function(){return v("")},onChange:function(e){return v(e.target.value)}})),l.a.createElement("div",{className:"col"},l.a.createElement(o.l,{color:"info",placeholder:"777 777 77 77",value:h,rounded:!0,label:"Rounded default size input field with label and prefix",width:"300px",prefix:l.a.createElement(o.k,{name:"smartphone"}),onClear:function(){return v("")},onChange:function(e){return v(e.target.value)}}),l.a.createElement(o.l,{size:"medium",color:"info",rounded:!0,label:"Rounded medium size input field with label and prefix",prefix:l.a.createElement(o.k,{name:"smartphone"}),placeholder:"777 777 77 77",value:h,width:"300px",onClear:function(){return v("")},onChange:function(e){return v(e.target.value)}}),l.a.createElement(o.l,{size:"large",color:"info",rounded:!0,label:"Rounded large size input field with label and prefix",prefix:l.a.createElement(o.k,{name:"smartphone"}),placeholder:"777 777 77 77 ",value:h,width:"300px",onClear:function(){return v("")},onChange:function(e){return v(e.target.value)}}))),l.a.createElement(o.g,{icon:"code",iconSize:18,tooltip:"Code"},l.a.createElement(i.a,{language:"jsx",style:u.a},'// Usage examples\nimport React, { useState } from \'react\';\nimport { InputField } from \'@assenti/react-ui-components\';\n\nfunction Example() {\n    const [second, setSecond] = useState(\'\');\n\n    return (\n        <div className="row">\n            <div className="col">\n                <InputField\n                    color="info"\n                    placeholder="777 777 77 77" \n                    value={second} \n                    label="Default input field with label and prefix"\n                    width="300px"\n                    prefix={<Icon name="smartphone"/>}\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size="medium"\n                    color="info"\n                    label="Medium input field with label and prefix"\n                    prefix={<Icon name="smartphone"/>}\n                    placeholder="777 777 77 77" \n                    value={second} \n                    width="300px"\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size="large"\n                    color="info"\n                    label="Large input field with label and prefix"\n                    prefix={<Icon name="smartphone"/>}\n                    placeholder="777 777 77 77 " \n                    value={second} \n                    width="300px"\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n            </div>\n            <div className="col">\n                <InputField\n                    color="info"\n                    placeholder="777 777 77 77" \n                    value={second}\n                    rounded \n                    label="Rounded default size input field with label and prefix"\n                    width="300px"\n                    prefix={<Icon name="smartphone"/>}\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size="medium"\n                    color="info"\n                    rounded \n                    label="Rounded medium size input field with label and prefix"\n                    prefix={<Icon name="smartphone"/>}\n                    placeholder="777 777 77 77" \n                    value={second} \n                    width="300px"\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size="large"\n                    color="info"\n                    rounded \n                    label="Rounded large size input field with label and prefix"\n                    prefix={<Icon name="smartphone"/>}\n                    placeholder="777 777 77 77 " \n                    value={second} \n                    width="300px"\n                    onClear={() => setSecond(\'\')} \n                    onChange={e => setSecond(e.target.value)}/>\n            </div>\n        </div>\n    )\n}'))),l.a.createElement(o.e,{outlined:!0,color:"primary",title:"TextareaField Usage"},l.a.createElement(o.x,{prefix:l.a.createElement(o.k,{name:"edit"}),label:"Textarea field",placeholder:"Textarea field",value:C,maxRows:20,color:"primary",width:300,clearable:!0,onClear:function(){return E("")},onChange:function(e){return E(e.target.value)}}),l.a.createElement(o.g,{icon:"code",iconSize:18,tooltip:"Code"},l.a.createElement(i.a,{language:"jsx",style:u.a},"// Usage examples\nimport React, { useState } from 'react';\nimport { TextareaField, Icon } from '@assenti/react-ui-components';\n\nfunction Example() {\n    const [text, setText] = useState('');\n\n    return (\n        <div>\n        <TextareaField\n            prefix={<Icon name=\"edit\" />}\n            label=\"Textarea field\"\n            placeholder=\"Textarea field\" \n            value={text}\n            maxRows={20}\n            color=\"primary\"\n            width={300}\n            onClear={() => setText('')} \n            onChange={e => setText(e.target.value)}/>\n        </div>\n    )\n}"))),l.a.createElement(o.a,{setRef:k,dark:!0,size:"medium"}),l.a.createElement("h2",{ref:I},"InputField API"),l.a.createElement(o.v,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:c,index:!0,itemTitles:p}),l.a.createElement("h2",null,"TextareaField API"),l.a.createElement(o.v,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:d,index:!0,itemTitles:p}))}}}]);
//# sourceMappingURL=19.chunk.js.map