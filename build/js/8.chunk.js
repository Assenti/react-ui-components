(this["webpackJsonp@assenti/rui-components"]=this["webpackJsonp@assenti/rui-components"]||[]).push([[8],{285:function(e,t,n){"use strict";n.r(t);var a=n(1),r=n(0),l=n.n(r),o=n(3),i=n(321),s=n(273),c=n(51),u=["property","description","default","type","value"],m=[{property:"items",description:"Select options",default:"",type:"string[] | object[]",value:""},{property:"itemKey",description:"Set if you pass items as array of objects",default:"",type:"string",value:""},{property:"childrenKey",description:"Set if you pass items with children array (pass the key of item that has children array)",default:"",type:"string",value:""},{property:"onChange",description:"Invokes in select option select (return item value)",default:"",type:"function",value:""},{property:"searchable",description:"Enable searching field in select menu (has effect only with one level list)",default:"false",type:"boolean",value:"true | false"},{property:"returnObject",description:"Returns item object on select change (used when items passed as array of objects, works only with one level items)",default:"false",type:"boolean",value:"true | false"},{property:"size",description:"Set select size",default:"",type:"string",value:"medium | large"},{property:"width",description:"Set select width",default:"",type:"string | number",value:""},{property:"maxHeight",description:"Set select list max height",default:"",type:"string | number",value:""},{property:"label",description:"Set select label",default:"",type:"string",value:""},{property:"placeholder",description:"Set placeholder",default:"",type:"string",value:""},{property:"color",description:"Set select color",default:"",type:"string",value:"primary | info | success | error"},{property:"borderType",description:"Set borders type",default:"",type:"string",value:"tile | smooth | rounded"},{property:"multiple",description:"Enable multiple selection (Warning: if multiple prop set, childrenKey has no effect)",default:"false",type:"boolean",value:"true | false"},{property:"onSelect",description:"Invokes on multiple selection (return selected value & selected list)",default:"",type:"function",value:""},{property:"tagColor",description:"Set Tag color (Has effect only with multiple prop)",default:"",type:"string",value:"primary | info | success | error | black"},{property:"tagOutlined",description:"Set Tag outlined prop",default:"",type:"boolean",value:"true | false"},{property:"prefix",description:"Set prefix",default:"",type:"any",value:""},{property:"whiteBackground",description:"Set input background color to white",default:"false",type:"boolean",value:"true | false"},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}],p="// Usage examples\nimport React, { useState } from 'react';\nimport { Select, Icon, Switch } from '@assenti/react-ui-components';\nconst colors = ['primary', 'info', 'success', 'error'];\nconst sizes = ['default', 'medium', 'large'];\nconst borders = ['default', 'tile', 'rounded', 'smooth'];\n\nconst countries = [\n    { country: 'Kazakhstan', cities: [ 'Nur-Sultan', 'Almaty', 'Shymkent' ] }, \n    { country: 'Russia', cities: ['Moscow', 'St. Petersburg', 'Krasnodar'] }, \n    { country: 'USA', cities: ['Washington, D.C.', 'New York City', 'San Francisco'] }, \n    { country: 'United Kingdom', cities: ['London', 'York', 'Manchester'] }, \n    { country: 'Canada', cities: ['Ottawa', 'Toronto', 'Vancouver'] }, \n    { country: 'Germany', cities: ['Berlin', 'Munich', 'Hamburg'] }, \n    { country: 'France', cities: ['Paris', 'Nice', 'Marselle'] }, \n    { country: 'China', cities: ['Beijing', 'Shanghai', 'Shenzhen'] },\n    { country: 'Japan', cities: ['Tokyo', 'Osaka', 'Kyoto'] },\n    { country: 'South Korea', cities: ['Seoul', 'Busan', 'Daegu'] }\n]\nfunction Example() {\n    const [city, setCity] = useState('');\n    const [country, setCountry] = useState('');\n    const [color, setColor] = useState(colors[0]);\n    const [size, setSize] = useState(sizes[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [disabled, setDisabled] = useState(false);\n    const [maxHeight, setMaxHeight] = useState(false);\n\n    return (\n        <>\n            <Select\n                items={colors}\n                prefix={<Icon name=\"brush\"/>}\n                width={200}\n                label=\"Color\"\n                color=\"primary\"\n                className=\"my-5\"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Select\n                items={sizes}\n                prefix={<Icon name=\"format-size\"/>}\n                width={200}\n                label=\"Size\"\n                color=\"primary\"\n                className=\"my-5\"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Select\n                items={borders}\n                prefix={<Icon name=\"shape\"/>}\n                width={200}\n                label=\"Border type\"\n                color=\"primary\"\n                className=\"my-5\"\n                value={border}\n                onChange={v => setBorder(v)}/>\n            <br/>\n            <Switch \n                check={maxHeight} \n                color=\"primary\"\n                rightLabel=\"Set max height\" \n                className=\"my-10\"\n                onChange={() => setMaxHeight(!maxHeight)}/>\n            <Switch \n                check={disabled} \n                color=\"primary\"\n                rightLabel=\"Disabled\" \n                className=\"my-10\"\n                onChange={() => setDisabled(!disabled)}/>\n            <br/>\n            <Select\n                items={countries}\n                prefix={<Icon name=\"earth\"/>}\n                itemKey=\"country\"\n                label=\"One level items select\"\n                width={250}\n                maxHeight={maxHeight ? 200 : null}\n                disabled={disabled}\n                size={size}\n                borderType={border}\n                clearable\n                onClear={() => setCountry('')}\n                color={color}\n                placeholder=\"Countries\"\n                value={country}\n                onChange={value => setCountry(value)}/>\n            <br/>\n            <Select\n                prefix={<Icon name=\"earth\"/>}\n                label=\"Two level items select\"\n                items={countries}\n                itemKey=\"country\"\n                childrenKey=\"cities\"\n                color={color}\n                borderType={border}\n                width={250}\n                size={size}\n                placeholder=\"Cities\"\n                value={city}\n                onChange={value => {\n                    setCity(value)\n                    console.log(value)\n                }}/>\n            <br/>\n            <Select\n                prefix={<Icon name=\"earth\"/>}\n                label=\"One level items searchable select\"\n                items={countries}\n                itemKey=\"country\"\n                color={color}\n                maxHeight={maxHeight ? 200 : null}\n                width={250}\n                borderType={border}\n                searchable\n                size={size}\n                placeholder=\"Countries\"\n                value={country}\n                onChange={value => setCountry(value)}/>\n            <br/>\n            <Select\n                prefix={<Icon name=\"earth\"/>}\n                label=\"One level items with multiple select\"\n                items={countries}\n                itemKey=\"country\"\n                color={color}\n                maxHeight={maxHeight ? 200 : null}\n                width={250}\n                multiple\n                size={size}\n                borderType={border}\n                placeholder=\"Countries\"\n                value={city}\n                tagOutlined\n                onSelect={(selectedItem, selectedItems) => \n                    console.log(selectedItem, selectedItems)}\n                onChange={value => setCity(value)}/>\n        </>\n    )\n}",d=["primary","info","success","error"],y=["default","medium","large"],h=["default","tile","rounded","smooth"];t.default=function(){var e=Object(r.useState)(""),t=Object(a.a)(e,2),n=t[0],b=t[1],f=Object(r.useState)(""),g=Object(a.a)(f,2),v=g[0],S=g[1],C=Object(r.useState)(d[0]),E=Object(a.a)(C,2),w=E[0],x=E[1],z=Object(r.useState)(y[0]),O=Object(a.a)(z,2),k=O[0],j=O[1],K=Object(r.useState)(h[0]),N=Object(a.a)(K,2),T=N[0],H=N[1],I=Object(r.useState)(!1),B=Object(a.a)(I,2),D=B[0],M=B[1],P=Object(r.useState)(!1),R=Object(a.a)(P,2),A=R[0],F=R[1],L=Object(r.useRef)(),U=Object(r.useRef)();return l.a.createElement("div",{className:"rui-page",ref:L},l.a.createElement("div",{className:"row align-center space-between"},l.a.createElement("div",{className:"rui-page-title"},"<Select/>"," Component"),l.a.createElement("div",{className:"rui-link fz-13 fw-bold mr-10",onClick:function(){U.current&&U.current.scrollIntoView({behavior:"smooth",block:"center"})}},"API")),l.a.createElement(o.j,{outlined:!0,title:"Usage"},l.a.createElement(o.E,{items:d,prefix:l.a.createElement(o.s,{name:"brush"}),width:200,label:"Color",color:"primary",className:"my-5",value:w,onChange:function(e){return x(e)}}),l.a.createElement("br",null),l.a.createElement(o.E,{items:y,prefix:l.a.createElement(o.s,{name:"format-size"}),width:200,label:"Size",color:"primary",className:"my-5",value:k,onChange:function(e){return j(e)}}),l.a.createElement("br",null),l.a.createElement(o.E,{items:h,prefix:l.a.createElement(o.s,{name:"shape"}),width:200,label:"Border type",color:"primary",className:"my-5",value:T,onChange:function(e){return H(e)}}),l.a.createElement("br",null),l.a.createElement(o.F,{check:A,color:"primary",rightLabel:"Set max height",className:"my-10",onChange:function(){return F(!A)}}),l.a.createElement(o.F,{check:D,color:"primary",rightLabel:"Disabled",className:"my-10",onChange:function(){return M(!D)}}),l.a.createElement("br",null),l.a.createElement(o.E,{items:c.a,prefix:l.a.createElement(o.s,{name:"earth"}),itemKey:"country",label:"One level items select",width:250,maxHeight:A?200:null,disabled:D,size:k,borderType:T,clearable:!0,onClear:function(){return S("")},color:w,placeholder:"Countries",value:v,onChange:function(e){return S(e)}}),l.a.createElement("br",null),l.a.createElement(o.E,{prefix:l.a.createElement(o.s,{name:"earth"}),label:"Two level items select",items:c.a,itemKey:"country",childrenKey:"cities",color:w,borderType:T,width:250,size:k,placeholder:"Cities",value:n,onChange:function(e){b(e),console.log(e)}}),l.a.createElement("br",null),l.a.createElement(o.E,{prefix:l.a.createElement(o.s,{name:"earth"}),label:"One level items searchable select",items:c.a,itemKey:"country",color:w,maxHeight:A?200:null,width:250,borderType:T,searchable:!0,size:k,placeholder:"Countries",value:v,onChange:function(e){return S(e)}}),l.a.createElement("br",null),l.a.createElement(o.E,{prefix:l.a.createElement(o.s,{name:"earth"}),label:"One level items with multiple select",items:c.a,itemKey:"country",color:w,maxHeight:A?200:null,width:250,multiple:!0,size:k,borderType:T,placeholder:"Countries",value:n,tagOutlined:!0,onSelect:function(e,t){return console.log(e,t)},onChange:function(e){return b(e)}}),l.a.createElement(o.l,{icon:"code",iconSize:18,extra:l.a.createElement(o.m,{defaultText:"Copy code",text:p,className:"mr-10"}),contentStyles:{padding:0},tooltip:"Code"},l.a.createElement(i.a,{language:"jsx",style:s.a},p))),l.a.createElement(o.d,{setRef:L,dark:!0,size:"medium"}),l.a.createElement("h2",{ref:U},"API"),l.a.createElement(o.G,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:m,index:!0,itemTitles:u}))}},51:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var a=[{country:"Kazakhstan",cities:["Nur-Sultan","Almaty","Shymkent"],icon:"flag"},{country:"Russia",cities:["Moscow","St. Petersburg","Krasnodar"],icon:"flag"},{country:"USA",cities:["Washington, D.C.","New York City","San Francisco"],icon:"flag"},{country:"United Kingdom",cities:["London","York","Manchester"],icon:"flag"},{country:"Canada",cities:["Ottawa","Toronto","Vancouver"],icon:"flag"},{country:"Germany",cities:["Berlin","Munich","Hamburg"],icon:"flag"},{country:"France",cities:["Paris","Nice","Marselle"],icon:"flag"},{country:"China",cities:["Beijing","Shanghai","Shenzhen"],icon:"flag"},{country:"Japan",cities:["Tokyo","Osaka","Kyoto"],icon:"flag"},{country:"South Korea",cities:["Seoul","Busan","Daegu"],icon:"flag"}]}}]);