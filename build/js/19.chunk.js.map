{"version":3,"sources":["pages/InputsPage.js"],"names":["keys","items","property","description","default","type","value","itemsTextarea","InputsPage","useState","first","setFirst","second","setSecond","third","setThird","text","setText","api","createRef","parent","className","ref","onClick","current","scrollIntoView","behavior","block","outlined","color","title","label","placeholder","width","hint","onClear","onChange","e","target","smooth","lifted","prefix","name","rounded","clearable","autoFocus","suffix","disabled","icon","iconSize","tooltip","language","style","prism","size","maxRows","setRef","dark","bordered","headers","index","itemTitles"],"mappings":"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","file":"js/19.chunk.js","sourcesContent":["import React, { useState, createRef } from 'react';\nimport { InputField, Icon, Card, Button, Table, Collapse, BackTopBtn, TextareaField } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst inputTypes = \n`// Usage examples\nimport React, { useState } from 'react';\nimport { InputField } from '@assenti/react-ui-components';\n\nfunction Example() {\n    const [first, setFirst] = useState('');\n    const [second, setSecond] = useState('');\n\n    return (\n        <div className=\"row wrap\">\n            <div className=\"col\">\n                <InputField\n                    label=\"Standard input with clear button and hint\"\n                    placeholder=\"Input a text\" \n                    value={first}\n                    color=\"primary\"\n                    width=\"300px\"\n                    hint=\"Some hint\"\n                    onClear={() => setFirst('')} \n                    onChange={e => setFirst(e.target.value)}/>\n                <InputField\n                    label=\"Smooth input with prefix, clear button with lifted prop\"\n                    placeholder=\"Input a text\" \n                    value={first}\n                    smooth\n                    lifted\n                    color=\"primary\"\n                    prefix={<Icon name=\"search\"/>}\n                    width=\"300px\"\n                    onClear={() => setFirst('')} \n                    onChange={e => setFirst(e.target.value)}/>\n                <InputField\n                    label=\"Rounded input field with prefix, suffix and clear button\"\n                    placeholder=\"Defaul size input field\" \n                    value={first}\n                    rounded\n                    clearable\n                    autoFocus\n                    onClear={() => setFirst('')} \n                    prefix={<Icon name=\"search\"/>}\n                    suffix={<Icon name=\"edit\"/>}\n                    color=\"info\"\n                    width=\"300px\"\n                    onChange={e => setFirst(e.target.value)}/>\n                <InputField\n                    label=\"Disabled input field\"\n                    placeholder=\"Defaul size rounded input field\" \n                    value={first}\n                    rounded\n                    disabled\n                    prefix={<Icon name=\"account\"/>}\n                    color=\"info\"\n                    width=\"300px\"\n                    onClear={() => setFirst('')} \n                    onChange={e => setFirst(e.target.value)}/>\n            </div>\n            <div className=\"col\">\n                <InputField\n                    label=\"Standard input field with suffix button\"\n                    placeholder=\"Search...\" \n                    value={second}\n                    color=\"primary\"\n                    width=\"100%\"\n                    prefix={<Icon name=\"search\"/>}\n                    suffix={<Button name=\"Search\" color=\"primary\" onClick={() => {}}/>}\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    label=\"Smooth input field with suffix button\"\n                    placeholder=\"Search...\" \n                    value={second}\n                    color=\"primary\"\n                    width=\"100%\"\n                    smooth\n                    prefix={<Icon name=\"search\"/>}\n                    suffix={<Button name=\"Search\" color=\"primary\" onClick={() => {}}/>}\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    label=\"Rounded input field with suffix button\"\n                    placeholder=\"Search...\" \n                    value={second}\n                    color=\"error\"\n                    width=\"100%\"\n                    rounded\n                    prefix={<Icon name=\"search\"/>}\n                    suffix={<Button name=\"Search\" color=\"error\" onClick={() => {}}/>}\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n            </div>\n        </div>\n    )\n}`\n\nconst inputSizes =\n`// Usage examples\nimport React, { useState } from 'react';\nimport { InputField } from '@assenti/react-ui-components';\n\nfunction Example() {\n    const [second, setSecond] = useState('');\n\n    return (\n        <div className=\"row\">\n            <div className=\"col\">\n                <InputField\n                    color=\"info\"\n                    placeholder=\"777 777 77 77\" \n                    value={second} \n                    label=\"Default input field with label and prefix\"\n                    width=\"300px\"\n                    prefix={<Icon name=\"smartphone\"/>}\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size=\"medium\"\n                    color=\"info\"\n                    label=\"Medium input field with label and prefix\"\n                    prefix={<Icon name=\"smartphone\"/>}\n                    placeholder=\"777 777 77 77\" \n                    value={second} \n                    width=\"300px\"\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size=\"large\"\n                    color=\"info\"\n                    label=\"Large input field with label and prefix\"\n                    prefix={<Icon name=\"smartphone\"/>}\n                    placeholder=\"777 777 77 77 \" \n                    value={second} \n                    width=\"300px\"\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n            </div>\n            <div className=\"col\">\n                <InputField\n                    color=\"info\"\n                    placeholder=\"777 777 77 77\" \n                    value={second}\n                    rounded \n                    label=\"Rounded default size input field with label and prefix\"\n                    width=\"300px\"\n                    prefix={<Icon name=\"smartphone\"/>}\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size=\"medium\"\n                    color=\"info\"\n                    rounded \n                    label=\"Rounded medium size input field with label and prefix\"\n                    prefix={<Icon name=\"smartphone\"/>}\n                    placeholder=\"777 777 77 77\" \n                    value={second} \n                    width=\"300px\"\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n                <InputField\n                    size=\"large\"\n                    color=\"info\"\n                    rounded \n                    label=\"Rounded large size input field with label and prefix\"\n                    prefix={<Icon name=\"smartphone\"/>}\n                    placeholder=\"777 777 77 77 \" \n                    value={second} \n                    width=\"300px\"\n                    onClear={() => setSecond('')} \n                    onChange={e => setSecond(e.target.value)}/>\n            </div>\n        </div>\n    )\n}`\n\nconst textareaUsage =\n`// Usage examples\nimport React, { useState } from 'react';\nimport { TextareaField, Icon } from '@assenti/react-ui-components';\n\nfunction Example() {\n    const [text, setText] = useState('');\n\n    return (\n        <div>\n        <TextareaField\n            prefix={<Icon name=\"edit\" />}\n            label=\"Textarea field\"\n            placeholder=\"Textarea field\" \n            value={text}\n            maxRows={20}\n            color=\"primary\"\n            width={300}\n            onClear={() => setText('')} \n            onChange={e => setText(e.target.value)}/>\n        </div>\n    )\n}`\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'onChange', \n        description: 'Handle input value change', \n        default: '', \n        type: 'function',\n        value: 'return a input change event object'\n    },\n    { \n        property: 'value', \n        description: 'Input value', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'clearable', \n        description: 'Allow clear icon on value inputted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onClear', \n        description: 'Invokes on clear icon click', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'lifted', \n        description: 'Lift up the input field', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'autoFocus', \n        description: 'Set input focus on component mounted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set color of input field from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error'\n    },\n    { \n        property: 'disabled',\n        description: 'Make input field disabled', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'},\n    { \n        property: 'rounded', \n        description: 'Make border radius rounded',\n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'smooth',\n        description: 'Set input field borders more smooth', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'uppercase',\n        description: 'Transform text to upper case', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'size', \n        description: 'Set input field size',\n        default: '', \n        type: 'string',\n        value: 'medium | large'\n    },\n    { \n        property: 'prefix',\n        description: 'Set prefix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'suffix',\n        description: 'Set suffix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'width',\n        description: 'Set InputField width', \n        default: '', \n        type: 'string | number',\n        value: ''\n    },\n    { \n        property: 'type',\n        description: 'Set input type', \n        default: 'text', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'required',\n        description: 'Set input required', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'readOnly',\n        description: 'Set input readOnly', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'whiteBackground',\n        description: 'Set input background color to white', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\nconst itemsTextarea = [\n    { \n        property: 'onChange', \n        description: 'Handle input value change', \n        default: '', \n        type: 'function',\n        value: 'return a input change event object'\n    },\n    { \n        property: 'value', \n        description: 'Input value', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'rows',\n        description: 'Set textarea rows count', \n        default: '1', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'maxRows',\n        description: 'Set maximum textarea rows', \n        default: '10', \n        type: 'number',\n        value: ''\n    },\n    { \n        property: 'clearable', \n        description: 'Allow clear icon on value inputted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onClear', \n        description: 'Invokes on clear icon click', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'lifted', \n        description: 'Lift up the input field', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'autoFocus', \n        description: 'Set input focus on component mounted', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set color of input field from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error'\n    },\n    { \n        property: 'disabled',\n        description: 'Make input field disabled', \n        default: 'false',\n        type: 'boolean', \n        value: 'true | false'},\n    { \n        property: 'rounded', \n        description: 'Make border radius rounded',\n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'smooth',\n        description: 'Set input field borders more smooth', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'uppercase',\n        description: 'Transform text to upper case', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'prefix',\n        description: 'Set prefix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'suffix',\n        description: 'Set suffix', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'width',\n        description: 'Set InputField width', \n        default: '', \n        type: 'string | number',\n        value: ''\n    },\n    { \n        property: 'required',\n        description: 'Set input required', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'readOnly',\n        description: 'Set input readOnly', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'whiteBackground',\n        description: 'Set input background color to white', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\n\nconst InputsPage = () => {\n    const [first, setFirst] = useState('');\n    const [second, setSecond] = useState('');\n    const [third, setThird] = useState('');\n    const [text, setText] = useState('');\n    const api = createRef();\n    const parent = createRef();\n\n    const goToApi = () => {\n        if (api.current) api.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n    }\n\n    return (\n        <div className=\"rui-page\" ref={parent}>\n            <div className=\"row align-center space-between\">\n                <div className=\"rui-page-title\">InputField, TextareaField Components</div>\n                <div onClick={() => goToApi()} className=\"rui-link fz-13 fw-bold mr-10\">API</div>\n            </div>\n            <Card outlined color=\"primary\" title=\"Input types\">\n                <div className=\"row wrap\">\n                    <div className=\"col\">\n                        <InputField\n                            label=\"Standard input with clear button and hint\"\n                            placeholder=\"Input a text\" \n                            value={first}\n                            color=\"primary\"\n                            width=\"300px\"\n                            hint=\"Some hint\"\n                            onClear={() => setFirst('')} \n                            onChange={e => setFirst(e.target.value)}/>\n                        <InputField\n                            label=\"Smooth input with prefix, clear button with lifted prop\"\n                            placeholder=\"Input a text\" \n                            value={first}\n                            smooth\n                            lifted\n                            color=\"primary\"\n                            prefix={<Icon name=\"search\"/>}\n                            width=\"300px\"\n                            onClear={() => setFirst('')} \n                            onChange={e => setFirst(e.target.value)}/>\n                        <InputField\n                            label=\"Rounded input field with prefix, suffix and clear button\"\n                            placeholder=\"Defaul size input field\" \n                            value={first}\n                            rounded\n                            clearable\n                            autoFocus\n                            onClear={() => setFirst('')} \n                            prefix={<Icon name=\"search\"/>}\n                            suffix={<Icon name=\"edit\"/>}\n                            color=\"info\"\n                            width=\"300px\"\n                            onChange={e => setFirst(e.target.value)}/>\n                        <InputField\n                            label=\"Disabled input field\"\n                            placeholder=\"Defaul size rounded input field\" \n                            value={first}\n                            rounded\n                            disabled\n                            prefix={<Icon name=\"account\"/>}\n                            color=\"info\"\n                            width=\"300px\"\n                            onClear={() => setFirst('')} \n                            onChange={e => setFirst(e.target.value)}/>\n                    </div>\n                    <div className=\"col\">\n                        <InputField\n                            label=\"Standard input field with suffix button\"\n                            placeholder=\"Search...\" \n                            value={third}\n                            color=\"primary\"\n                            width=\"100%\"\n                            prefix={<Icon name=\"search\"/>}\n                            suffix={<Button name=\"Search\" color=\"primary\" onClick={() => {}}/>}\n                            onClear={() => setThird('')} \n                            onChange={e => setThird(e.target.value)}/>\n                        <InputField\n                            label=\"Smooth input field with suffix button\"\n                            placeholder=\"Search...\" \n                            value={third}\n                            color=\"primary\"\n                            width=\"100%\"\n                            smooth\n                            prefix={<Icon name=\"search\"/>}\n                            suffix={<Button name=\"Search\" color=\"primary\" onClick={() => {}}/>}\n                            onClear={() => setThird('')} \n                            onChange={e => setThird(e.target.value)}/>\n                        <InputField\n                            label=\"Rounded input field with suffix button\"\n                            placeholder=\"Search...\" \n                            value={third}\n                            color=\"error\"\n                            width=\"100%\"\n                            rounded\n                            prefix={<Icon name=\"search\"/>}\n                            suffix={<Button name=\"Search\" color=\"error\" onClick={() => {}}/>}\n                            onClear={() => setThird('')} \n                            onChange={e => setThird(e.target.value)}/>\n                    </div>\n                </div>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {inputTypes}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <br/>\n            <Card outlined color=\"primary\" title=\"Input sizes\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <InputField\n                            color=\"info\"\n                            placeholder=\"777 777 77 77\" \n                            value={second} \n                            label=\"Default input field with label and prefix\"\n                            width=\"300px\"\n                            prefix={<Icon name=\"smartphone\"/>}\n                            onClear={() => setSecond('')} \n                            onChange={e => setSecond(e.target.value)}/>\n                        <InputField\n                            size=\"medium\"\n                            color=\"info\"\n                            label=\"Medium input field with label and prefix\"\n                            prefix={<Icon name=\"smartphone\"/>}\n                            placeholder=\"777 777 77 77\" \n                            value={second} \n                            width=\"300px\"\n                            onClear={() => setSecond('')} \n                            onChange={e => setSecond(e.target.value)}/>\n                        <InputField\n                            size=\"large\"\n                            color=\"info\"\n                            label=\"Large input field with label and prefix\"\n                            prefix={<Icon name=\"smartphone\"/>}\n                            placeholder=\"777 777 77 77 \" \n                            value={second} \n                            width=\"300px\"\n                            onClear={() => setSecond('')} \n                            onChange={e => setSecond(e.target.value)}/>\n                    </div>\n                    <div className=\"col\">\n                        <InputField\n                            color=\"info\"\n                            placeholder=\"777 777 77 77\" \n                            value={second}\n                            rounded \n                            label=\"Rounded default size input field with label and prefix\"\n                            width=\"300px\"\n                            prefix={<Icon name=\"smartphone\"/>}\n                            onClear={() => setSecond('')} \n                            onChange={e => setSecond(e.target.value)}/>\n                        <InputField\n                            size=\"medium\"\n                            color=\"info\"\n                            rounded \n                            label=\"Rounded medium size input field with label and prefix\"\n                            prefix={<Icon name=\"smartphone\"/>}\n                            placeholder=\"777 777 77 77\" \n                            value={second} \n                            width=\"300px\"\n                            onClear={() => setSecond('')} \n                            onChange={e => setSecond(e.target.value)}/>\n                        <InputField\n                            size=\"large\"\n                            color=\"info\"\n                            rounded \n                            label=\"Rounded large size input field with label and prefix\"\n                            prefix={<Icon name=\"smartphone\"/>}\n                            placeholder=\"777 777 77 77 \" \n                            value={second} \n                            width=\"300px\"\n                            onClear={() => setSecond('')} \n                            onChange={e => setSecond(e.target.value)}/>\n                    </div>\n                </div>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {inputSizes}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <Card outlined color=\"primary\" title=\"TextareaField Usage\">\n                <TextareaField\n                    prefix={<Icon name=\"edit\" />}\n                    label=\"Textarea field\"\n                    placeholder=\"Textarea field\" \n                    value={text}\n                    maxRows={20}\n                    color=\"primary\"\n                    width={300}\n                    clearable\n                    onClear={() => setText('')} \n                    onChange={e => setText(e.target.value)}/>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {textareaUsage}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <BackTopBtn setRef={parent} dark size=\"medium\"/>\n            <h2 ref={api}>InputField API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index={true}\n                itemTitles={keys}/>\n            <h2>TextareaField API</h2>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={itemsTextarea}\n                index={true}\n                itemTitles={keys}/>\n        </div>\n    )\n}\n\nexport default InputsPage;"],"sourceRoot":""}