{"version":3,"sources":["pages/PopOverPage.js"],"names":["keys","items","property","description","default","type","value","usage","positions","PopOverPage","useState","visible","setVisible","trigger","setTrigger","dark","setDark","control","setControl","position","setPosition","parent","useRef","className","ref","outlined","title","prefix","name","width","label","color","onChange","v","check","leftLabel","rightLabel","onClose","content","onClick","console","log","icon","iconSize","extra","defaultText","text","contentStyles","padding","tooltip","language","style","prism","setRef","size","bordered","headers","index","itemTitles"],"mappings":"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","file":"js/28.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Card, PopOver, Icon, Button, Table, Collapse, BackTopBtn, CopyToClipboard, Switch, Select } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'trigger', \n        description: 'Set pop over trigger', \n        default: 'click', \n        type: 'string',\n        value: 'click | hover'\n    },\n    { \n        property: 'control', \n        description: 'Allow pop over custom state control', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'visible', \n        description: 'Set custom state (active if control prop set)', \n        default: '', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onClose', \n        description: 'Invokes on pop over close button click and blur', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'noBlur', \n        description: 'Disable closeing popover on blur (has effect with control prop)', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'title',\n        description: 'Set pop over title', \n        default: '', \n        type: '',\n        value: ''\n    },\n    { \n        property: 'content',\n        description: 'Set content in pop over body', \n        default: '', \n        type: 'any',\n        value: ''\n    },\n    { \n        property: 'position', \n        description: 'Set popover position', \n        default: 'top', \n        type: 'string',\n        value: 'top | bottom | right | left'\n    },\n    { \n        property: 'dark', \n        description: 'Set dark mode', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\n\nconst usage = \n`// Usage examples\nimport React, { useState } from 'react';\nimport { PopOver, Button, Select, Icon, Switch } from '@assenti/react-ui-components';\nconst positions = ['left', 'top', 'bottom', 'right'];\n\nfunction Example() {\n    const [visible, setVisible] = useState(false);\n    const [trigger, setTrigger] = useState(false);\n    const [dark, setDark] = useState(false);\n    const [control, setControl] = useState(false);\n    const [position, setPosition] = useState(positions[0]);\n\n    return (\n        <div>\n            <Select\n                items={positions}\n                prefix={<Icon name=\"book-open\"/>}\n                width={200}\n                label=\"PopOver position\"\n                color=\"primary\"\n                className=\"my-10\"\n                value={position}\n                onChange={v => setPosition(v)}/>\n            <br/>\n            <Switch \n                check={trigger} \n                color=\"primary\"\n                leftLabel=\"Hover\" \n                rightLabel=\"Click\" \n                className=\"my-10\"\n                onChange={() => setTrigger(!trigger)}/>\n            <br/>\n            <Switch \n                check={dark} \n                color=\"primary\"\n                rightLabel=\"Dark\" \n                className=\"my-10\"\n                onChange={() => setDark(!dark)}/>\n            <br/>\n            <Switch \n                check={control} \n                color=\"primary\"\n                rightLabel=\"Control state\" \n                className=\"my-10\"\n                onChange={() => setControl(!control)}/>\n            <div className=\"row justify-center py-30\">\n                <PopOver \n                    title=\"Quit\"\n                    dark={dark}\n                    trigger={trigger ? 'click' : 'hover'}\n                    position={position}\n                    control={control}\n                    visible={visible}\n                    onClose={() => setVisible(false)}\n                    content={\n                        <div>\n                            <p>Are are sure?</p>\n                            <div className=\"row align-center justify-center\">\n                                <Button \n                                    name=\"Nope\" \n                                    color=\"secondary\" \n                                    className=\"mr-5\"\n                                    onClick={() => console.log('Nope!')}/>\n                                <Button \n                                    name=\"Yeap\" \n                                    color=\"primary\" \n                                    onClick={() => console.log('Yeap!')}/>\n                            </div>\n                        </div>\n                    }>\n                    <Button\n                        onClick={() => control ? setVisible(true) : {}} \n                        name=\"Get started\" \n                        color=\"primary\"/>\n                </PopOver>\n            </div>\n        </div>\n    )\n}`\nconst positions = ['left', 'top', 'bottom', 'right'];\n\nconst PopOverPage = () => {\n    const [visible, setVisible] = useState(false);\n    const [trigger, setTrigger] = useState(false);\n    const [dark, setDark] = useState(false);\n    const [control, setControl] = useState(false);\n    const [position, setPosition] = useState(positions[1]);\n    const parent = useRef();\n\n    return (\n        <div className=\"rui-page\" ref={parent}>\n            <div className=\"row align-center space-between\">\n                <div className=\"rui-page-title\">PopOver Component</div>\n            </div>\n            <Card outlined title=\"PopOver usage\">\n                <Select\n                    items={positions}\n                    prefix={<Icon name=\"book-open\"/>}\n                    width={200}\n                    label=\"PopOver position\"\n                    color=\"primary\"\n                    className=\"my-10\"\n                    value={position}\n                    onChange={v => setPosition(v)}/>\n                <br/>\n                <Switch \n                    check={trigger} \n                    color=\"primary\"\n                    leftLabel=\"Hover\" \n                    rightLabel=\"Click\" \n                    className=\"my-10\"\n                    onChange={() => setTrigger(!trigger)}/>\n                <br/>\n                <Switch \n                    check={dark} \n                    color=\"primary\"\n                    rightLabel=\"Dark\" \n                    className=\"my-10\"\n                    onChange={() => setDark(!dark)}/>\n                <br/>\n                <Switch \n                    check={control} \n                    color=\"primary\"\n                    rightLabel=\"Control state\" \n                    className=\"my-10\"\n                    onChange={() => setControl(!control)}/>\n                <div className=\"row justify-center py-30\">\n                    <PopOver \n                        title=\"Quit\"\n                        dark={dark}\n                        trigger={trigger ? 'click' : 'hover'}\n                        position={position}\n                        control={control}\n                        visible={visible}\n                        onClose={() => setVisible(false)}\n                        content={\n                            <div>\n                                <p>Are are sure?</p>\n                                <div className=\"row align-center justify-center\">\n                                    <Button \n                                        name=\"Nope\" \n                                        color=\"secondary\" \n                                        className=\"mr-5\"\n                                        onClick={() => console.log('Nope!')}/>\n                                    <Button \n                                        name=\"Yeap\" \n                                        color=\"primary\" \n                                        onClick={() => console.log('Yeap!')}/>\n                                </div>\n                            </div>\n                        }>\n                        <Button\n                            onClick={() => control ? setVisible(true) : {}} \n                            name=\"Get started\" \n                            color=\"primary\"/>\n                    </PopOver>\n                </div>\n                <Collapse \n                    icon=\"code\" \n                    iconSize={18}\n                    extra={<CopyToClipboard defaultText=\"Copy code\" text={usage} className=\"mr-10\"/>}\n                    contentStyles={{ padding: 0 }}\n                    tooltip=\"Show/Hide Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {usage}\n                    </SyntaxHighlighter> \n                </Collapse>\n            </Card>\n            <h2>API</h2>\n            <BackTopBtn setRef={parent} dark size=\"medium\"/>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index={true}\n                itemTitles={keys}/>\n        </div>\n    )\n}\nexport default PopOverPage;"],"sourceRoot":""}