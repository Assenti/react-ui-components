(this["webpackJsonp@assenti/rui-components"]=this["webpackJsonp@assenti/rui-components"]||[]).push([[6],{278:function(e,t,a){e.exports=a.p+"static/media/world.136490c6.png"},321:function(e,t,a){"use strict";a.r(t);var n=a(1),r=a(0),o=a.n(r),i=a(3),l=a(323),c=a(274),s=a(49),u=a(278),m=a.n(u),p=["property","description","default","type","value"],d=[{property:"items",description:"AutoComplete options",default:"",type:"string[] | object[]",value:""},{property:"itemKey",description:"Set if you pass items as array of objects",default:"",type:"string",value:""},{property:"iconKey",description:"Set icon",default:"",type:"string",value:""},{property:"avatarKey",description:"Set avatar",default:"",type:"string",value:""},{property:"value",description:"AutoComplete value",default:"",type:"string",value:""},{property:"onChange",description:"Invokes on input or option selection",default:"",type:"function",value:""},{property:"size",description:"Set select size",default:"",type:"string",value:"medium | large"},{property:"maxHeight",description:"Set dropdown list max height",default:"",type:"string | number",value:""},{property:"width",description:"Set width",default:"",type:"string | number",value:""},{property:"label",description:"Set select label",default:"",type:"string",value:""},{property:"placeholder",description:"Set placeholder",default:"",type:"string",value:""},{property:"color",description:"Set select color",default:"",type:"string",value:"primary | info | success | error"},{property:"borderType",description:"Set borders type",default:"",type:"string",value:"tile | smooth | rounded"},{property:"prefix",description:"Set prefix",default:"",type:"ReactNode | string | number",value:""},{property:"suffix",description:"Set suffix",default:"",type:"ReactNode | string | number",value:""},{property:"clearable",description:"Enable value clearing",default:"false",type:"boolean",value:"true | false"},{property:"onClear",description:"Invokes on clear icon click (required with clearable prop)",default:"",type:"function",value:""},{property:"loading",description:"Set loading state",default:"false",type:"boolean",value:"true | false"},{property:"whiteBackground",description:"Set input background color to white",default:"false",type:"boolean",value:"true | false"},{property:"disabled",description:"Disable AutoComplete",default:"false",type:"boolean",value:"true | false"},{property:"required",description:"Set required flag",default:"false",type:"boolean",value:"true | false"},{property:"readOnly",description:"Set read only flag",default:"false",type:"boolean",value:"true | false"},{property:"className",description:"Set a custom css class to component",default:"",type:"string",value:""}],y="// Usage examples\nimport React, { useState } from 'react';\nimport { AutoComplete, Select, Icon, Switch, RadioGroup } from '@assenti/react-ui-components';\n\nconst countries = [\n    { country: 'Kazakhstan', cities: [ 'Nur-Sultan', 'Almaty', 'Shymkent' ] }, \n    { country: 'Russia', cities: ['Moscow', 'St. Petersburg', 'Krasnodar'] }, \n    { country: 'USA', cities: ['Washington, D.C.', 'New York City', 'San Francisco'] }, \n    { country: 'United Kingdom', cities: ['London', 'York', 'Manchester'] }, \n    { country: 'Canada', cities: ['Ottawa', 'Toronto', 'Vancouver'] }, \n    { country: 'Germany', cities: ['Berlin', 'Munich', 'Hamburg'] }, \n    { country: 'France', cities: ['Paris', 'Nice', 'Marselle'] }, \n    { country: 'China', cities: ['Beijing', 'Shanghai', 'Shenzhen'] },\n    { country: 'Japan', cities: ['Tokyo', 'Osaka', 'Kyoto'] },\n    { country: 'South Korea', cities: ['Seoul', 'Busan', 'Daegu'] }\n]\nconst colors = ['primary', 'info', 'success', 'error'];\nconst sizes = ['default', 'medium', 'large'];\nconst borders = ['default', 'tile', 'rounded', 'smooth'];\nconst types = ['none','image', 'icon'];\n\nfunction Example() {\n    const [city, setCity] = useState('');\n    const [color, setColor] = useState('primary');\n    const [size, setSize] = useState(sizes[0]);\n    const [border, setBorder] = useState(borders[0]);\n    const [disabled, setDisabled] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [prefix, setPrefix] = useState(true);\n    const [suffix, setSuffix] = useState(true);\n    const [label, setLabel] = useState(true);\n    const [footer, setFooter] = useState(true);\n    const [maxHeight, setMaxHeight] = useState(false);\n    const [listHeader, setListHeader] = useState(true);\n    const [type, setType] = useState(types[0]);\n    const [whiteBackground, setWhiteBackground] = useState(false);\n\n    return (\n        <>\n            <Select\n                items={colors}\n                prefix={<Icon name=\"brush\"/>}\n                width={200}\n                label=\"Color\"\n                color=\"primary\"\n                className=\"my-5\"\n                value={color}\n                onChange={v => setColor(v)}/>\n            <br/>\n            <Select\n                items={sizes}\n                prefix={<Icon name=\"format-size\"/>}\n                width={200}\n                label=\"Size\"\n                color=\"primary\"\n                className=\"my-5\"\n                value={size}\n                onChange={v => setSize(v)}/>\n            <br/>\n            <Select\n                items={borders}\n                prefix={<Icon name=\"shape\"/>}\n                width={200}\n                label=\"Border type\"\n                color=\"primary\"\n                className=\"my-5\"\n                value={border}\n                onChange={v => setBorder(v)}/>\n            <br/>\n            <Switch \n                check={disabled} \n                color=\"primary\"\n                rightLabel=\"Disabled\" \n                className=\"my-10\"\n                onChange={() => setDisabled(!disabled)}/>\n            <Switch \n                check={loading} \n                color=\"primary\"\n                rightLabel=\"Loading\" \n                className=\"my-10\"\n                onChange={() => setLoading(!loading)}/>\n            <br/>\n            <Switch \n                check={prefix} \n                color=\"primary\"\n                rightLabel=\"Prefix\" \n                className=\"my-10\"\n                onChange={() => setPrefix(!prefix)}/>\n            <Switch \n                check={suffix} \n                color=\"primary\"\n                rightLabel=\"Suffix\" \n                className=\"my-10\"\n                onChange={() => setSuffix(!suffix)}/>\n            <Switch \n                check={label} \n                color=\"primary\"\n                rightLabel=\"Label\" \n                className=\"my-10\"\n                onChange={() => setLabel(!label)}/>\n            \n            <br/>\n            <Switch \n                check={listHeader} \n                color=\"primary\"\n                rightLabel=\"List header\" \n                className=\"my-10\"\n                onChange={() => setListHeader(!listHeader)}/>\n            <Switch \n                check={footer} \n                color=\"primary\"\n                rightLabel=\"List footer\" \n                className=\"my-10\"\n                onChange={() => setFooter(!footer)}/>\n            <br/>\n            <Switch \n                check={whiteBackground} \n                color=\"primary\"\n                rightLabel=\"WhiteBackground\" \n                className=\"my-10\"\n                onChange={() => setWhiteBackground(!whiteBackground)}/>\n            <Switch \n                check={maxHeight} \n                color=\"primary\"\n                rightLabel=\"Set max height\" \n                className=\"my-10\"\n                onChange={() => setMaxHeight(!maxHeight)}/>\n            <br/>\n            <RadioGroup\n                options={types} \n                value={type}\n                name=\"type\"\n                className=\"mt-10\" \n                onChange={(value) => setType(value)}/>\n            <br/>\n            <AutoComplete\n                items={countries}\n                value={city}\n                width={250}\n                maxHeight={maxHeight ? 200 : null}\n                itemKey=\"country\"\n                iconKey={type === 'icon' ? 'icon' : null}\n                avatarKey={type === 'image' ? wordlImage : null}\n                avatarBorderType=\"rounded\"\n                avatarSize={24}\n                onChange={value => setCity(value)}\n                borderType={border}\n                color={color}\n                loading={loading}\n                label={label ? 'Countries' : null}\n                placeholder=\"Choose your favourive country\"\n                clearable\n                onClear={() => setCity('')}\n                className=\"my-10\"\n                listHeader={listHeader ? <div className=\"fz-9 text-info py-10\">There are all looks goods :)</div> : null}\n                footer={footer ? <div className=\"fz-9 text-info px-10 py-15\">I am just footer</div> : null}\n                disabled={disabled}\n                whiteBackground={whiteBackground}\n                prefix={prefix ? <Icon name=\"earth\"/> : null}\n                suffix={suffix ? <Icon name=\"chevron-down\"/> : null}\n                />\n        </>\n    )\n}",h=["primary","info","success","error"],f=["default","medium","large"],g=["default","tile","rounded","smooth"],b=["none","image","icon"];t.default=function(){var e=Object(r.useState)(""),t=Object(n.a)(e,2),a=t[0],u=t[1],S=Object(r.useState)("primary"),v=Object(n.a)(S,2),C=v[0],x=v[1],k=Object(r.useState)(f[0]),N=Object(n.a)(k,2),w=N[0],E=N[1],j=Object(r.useState)(g[0]),L=Object(n.a)(j,2),O=L[0],z=L[1],B=Object(r.useState)(!1),H=Object(n.a)(B,2),K=H[0],T=H[1],G=Object(r.useState)(!1),D=Object(n.a)(G,2),I=D[0],A=D[1],M=Object(r.useState)(!0),P=Object(n.a)(M,2),F=P[0],R=P[1],U=Object(r.useState)(!0),W=Object(n.a)(U,2),J=W[0],Y=W[1],q=Object(r.useState)(!0),V=Object(n.a)(q,2),Q=V[0],X=V[1],Z=Object(r.useState)(!0),$=Object(n.a)(Z,2),_=$[0],ee=$[1],te=Object(r.useState)(!1),ae=Object(n.a)(te,2),ne=ae[0],re=ae[1],oe=Object(r.useState)(!0),ie=Object(n.a)(oe,2),le=ie[0],ce=ie[1],se=Object(r.useState)(b[0]),ue=Object(n.a)(se,2),me=ue[0],pe=ue[1],de=Object(r.useState)(!1),ye=Object(n.a)(de,2),he=ye[0],fe=ye[1];return o.a.createElement("div",{className:"rui-page"},o.a.createElement("div",{className:"rui-page-title"},"<AutoComplete/>"," Component"),o.a.createElement(i.j,{outlined:!0,title:"Usage"},o.a.createElement(i.F,{items:h,prefix:o.a.createElement(i.t,{name:"brush"}),width:200,label:"Color",color:"primary",className:"my-5",value:C,onChange:function(e){return x(e)}}),o.a.createElement("br",null),o.a.createElement(i.F,{items:f,prefix:o.a.createElement(i.t,{name:"format-size"}),width:200,label:"Size",color:"primary",className:"my-5",value:w,onChange:function(e){return E(e)}}),o.a.createElement("br",null),o.a.createElement(i.F,{items:g,prefix:o.a.createElement(i.t,{name:"shape"}),width:200,label:"Border type",color:"primary",className:"my-5",value:O,onChange:function(e){return z(e)}}),o.a.createElement("br",null),o.a.createElement(i.G,{check:K,color:"primary",rightLabel:"Disabled",className:"my-10",onChange:function(){return T(!K)}}),o.a.createElement(i.G,{check:I,color:"primary",rightLabel:"Loading",className:"my-10",onChange:function(){return A(!I)}}),o.a.createElement("br",null),o.a.createElement(i.G,{check:F,color:"primary",rightLabel:"Prefix",className:"my-10",onChange:function(){return R(!F)}}),o.a.createElement(i.G,{check:J,color:"primary",rightLabel:"Suffix",className:"my-10",onChange:function(){return Y(!J)}}),o.a.createElement(i.G,{check:Q,color:"primary",rightLabel:"Label",className:"my-10",onChange:function(){return X(!Q)}}),o.a.createElement("br",null),o.a.createElement(i.G,{check:le,color:"primary",rightLabel:"List header",className:"my-10",onChange:function(){return ce(!le)}}),o.a.createElement(i.G,{check:_,color:"primary",rightLabel:"List footer",className:"my-10",onChange:function(){return ee(!_)}}),o.a.createElement("br",null),o.a.createElement(i.G,{check:he,color:"primary",rightLabel:"WhiteBackground",className:"my-10",onChange:function(){return fe(!he)}}),o.a.createElement(i.G,{check:ne,color:"primary",rightLabel:"Set max height",className:"my-10",onChange:function(){return re(!ne)}}),o.a.createElement("br",null),o.a.createElement(i.D,{options:b,value:me,name:"type",className:"mt-10",onChange:function(e){return pe(e)}}),o.a.createElement("br",null),o.a.createElement(i.b,{items:s.a,value:a,width:250,maxHeight:ne?200:null,itemKey:"country",iconKey:"icon"===me?"icon":null,avatarKey:"image"===me?m.a:null,avatarBorderType:"rounded",avatarSize:24,onChange:function(e){return u(e)},borderType:O,color:C,loading:I,label:Q?"Countries":null,placeholder:"Choose your favourive country",clearable:!0,onClear:function(){return u("")},className:"my-10",listHeader:le?o.a.createElement("div",{className:"fz-9 text-info py-10"},"There are all looks goods :)"):null,footer:_?o.a.createElement("div",{className:"fz-9 text-info px-10 py-15"},"I am just footer"):null,disabled:K,whiteBackground:he,prefix:F?o.a.createElement(i.t,{name:"earth"}):null,suffix:J?o.a.createElement(i.t,{name:"chevron-down"}):null}),o.a.createElement(i.l,{icon:"code",iconSize:18,contentStyles:{padding:0},tooltip:"Code",extra:o.a.createElement(i.m,{defaultText:"Copy code",text:y,className:"mr-10"})},o.a.createElement(l.a,{language:"jsx",style:c.a},y))),o.a.createElement(i.d,{dark:!0,size:"medium"}),o.a.createElement("h2",null,"API"),o.a.createElement(i.H,{bordered:!0,headers:["Property","Description","Default","Type","Value"],items:d,index:!0,itemTitles:p}))}},49:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var n=[{country:"Kazakhstan",cities:["Nur-Sultan","Almaty","Shymkent"],icon:"flag"},{country:"Russia",cities:["Moscow","St. Petersburg","Krasnodar"],icon:"flag"},{country:"USA",cities:["Washington, D.C.","New York City","San Francisco"],icon:"flag"},{country:"United Kingdom",cities:["London","York","Manchester"],icon:"flag"},{country:"Canada",cities:["Ottawa","Toronto","Vancouver"],icon:"flag"},{country:"Germany",cities:["Berlin","Munich","Hamburg"],icon:"flag"},{country:"France",cities:["Paris","Nice","Marselle"],icon:"flag"},{country:"China",cities:["Beijing","Shanghai","Shenzhen"],icon:"flag"},{country:"Japan",cities:["Tokyo","Osaka","Kyoto"],icon:"flag"},{country:"South Korea",cities:["Seoul","Busan","Daegu"],icon:"flag"}]}}]);