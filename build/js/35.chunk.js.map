{"version":3,"sources":["pages/TagPage.js"],"names":["keys","items","property","description","default","type","value","colors","borders","TagPage","parent","createRef","api","useState","visible","setVisible","outlined","setOutlined","small","setSmall","closable","setClosable","icon","setIcon","lifted","setLifted","color","setColor","borderType","setBorderType","className","ref","onClick","current","scrollIntoView","behavior","block","title","check","rightLabel","onChange","prefix","name","width","label","v","iconLeft","onClose","iconSize","tooltip","language","style","prism","setRef","dark","size","bordered","headers","index","itemTitles"],"mappings":"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","file":"js/35.chunk.js","sourcesContent":["import React, { createRef, useState } from 'react';\nimport { Tag, Card, Table, Collapse, BackTopBtn, Button, Select, Icon, Switch } from '../components';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst keys = ['property', 'description', 'default', 'type', 'value'];\nconst items = [\n    { \n        property: 'value', \n        description: 'Tag value', \n        default: '', \n        type: 'string',\n        value: ''\n    },\n    { \n        property: 'lifted', \n        description: 'Lift up the Tag', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'color', \n        description: 'Set color of Tag from list', \n        default: '', \n        type: 'string',\n        value: 'primary | info | success | error | dark | yellow'\n    },\n    { \n        property: 'borderType', \n        description: 'Set Tag borders',\n        default: '', \n        type: 'string',\n        value: 'tile | smooth | rounded'\n    },\n    { \n        property: 'uppercase',\n        description: 'Transform text to upper case', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'small', \n        description: 'Set tag size',\n        default: '', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'iconLeft', \n        description: 'Set icon before the value',\n        default: '', \n        type: 'string',\n        value: 'home | search | etc. (see icon names list in docs)'\n    },\n    { \n        property: 'iconRight', \n        description: 'Set icon after the value',\n        default: '', \n        type: 'string',\n        value: 'home | search | etc. (see icon names list in docs)'\n    },\n    { \n        property: 'width',\n        description: 'Set a tag width', \n        default: '', \n        type: 'string | number',\n        value: ''\n    },\n    { \n        property: 'setRef',\n        description: 'Set ref', \n        default: '', \n        type: 'React.RefObject',\n        value: ''\n    },\n    { \n        property: 'closable',\n        description: 'Enable close function', \n        default: 'false', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'visible',\n        description: 'Set Tag visible state', \n        default: 'true', \n        type: 'boolean',\n        value: 'true | false'\n    },\n    { \n        property: 'onClose',\n        description: 'Invokes on close icon click (has effect with closable prop)', \n        default: '', \n        type: 'function',\n        value: ''\n    },\n    { \n        property: 'className',\n        description: 'Set a custom css class to component', \n        default: '', \n        type: 'string',\n        value: ''\n    }\n]\n\nconst tagColors =\n`// Usage examples\nimport React, { useState } from 'react';\nimport { Tag, Switch, Select, Icon } from '@assenti/react-ui-components';\n\nconst colors = ['primary', 'info', 'success', 'error', 'dark', 'yellow'];\nconst borders = ['default', 'smooth', 'rounded', 'tile'];\n\nfunction Example() {\n    const [visible, setVisible] = useState(true);\n    const [outlined, setOutlined] = useState(false);\n    const [small, setSmall] = useState(false);\n    const [closable, setClosable] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [icon, setIcon] = useState(false);\n    const [color, setColor] = useState(colors[0]);\n    const [borderType, setBorderType] = useState(borders[0]);\n\n    return (\n        <div className=\"row column py-10\">\n            <Switch \n                color=\"primary\" \n                check={outlined}\n                rightLabel=\"Outlined\" \n                className=\"my-10\"\n                onChange={() => setOutlined(!outlined)}/>\n            <Switch \n                color=\"primary\" \n                check={small}\n                rightLabel=\"Small\" \n                className=\"my-10\"\n                onChange={() => setSmall(!small)}/>\n            <Switch \n                color=\"primary\" \n                check={closable}\n                rightLabel=\"Closable\" \n                className=\"my-10\"\n                onChange={() => setClosable(!closable)}/>\n            <Switch \n                color=\"primary\" \n                check={icon}\n                rightLabel=\"Icon\" \n                className=\"my-10\"\n                onChange={() => setIcon(!icon)}/>\n            <Switch \n                color=\"primary\" \n                check={lifted}\n                rightLabel=\"Lifted\" \n                className=\"my-10\"\n                onChange={() => setLifted(!lifted)}/>\n        </div>\n        <div className=\"row align-center pb-10\">\n            <Select\n                items={colors}\n                prefix={<Icon name=\"brush\"/>}\n                width={200}\n                label=\"Color\"\n                color=\"primary\"\n                value={color}\n                className=\"mr-10\"\n                onChange={v => setColor(v)}/>\n            <Select\n                items={borders}\n                prefix={<Icon name=\"shape\"/>}\n                width={200}\n                label=\"Border type\"\n                color=\"primary\"\n                value={borderType}\n                onChange={v => setBorderType(v)}/>\n        </div>\n        <div className=\"row align-center\">\n            <Tag \n                value=\"Price: 1000\"\n                outlined={outlined} \n                color={color}\n                small={small}\n                borderType={borderType}\n                iconLeft={icon ? 'tenge' : ''}\n                closable={closable}\n                visible={visible}\n                lifted={lifted}\n                onClose={() => setVisible(false)}/>\n            {closable ? <Button \n                name=\"Return Tag\" \n                color=\"info\" \n                className=\"ml-20\" \n                onClick={() => setVisible(true)}/> : ''}\n        </div>\n    )\n}`\n\nconst colors = ['primary', 'info', 'success', 'error', 'dark', 'yellow'];\nconst borders = ['default', 'smooth', 'rounded', 'tile'];\n\nconst TagPage = () => {\n    const parent = createRef();\n    const api = createRef();\n    const [visible, setVisible] = useState(true);\n    const [outlined, setOutlined] = useState(false);\n    const [small, setSmall] = useState(false);\n    const [closable, setClosable] = useState(false);\n    const [icon, setIcon] = useState(false);\n    const [lifted, setLifted] = useState(false);\n    const [color, setColor] = useState(colors[0]);\n    const [borderType, setBorderType] = useState(borders[0]);\n\n    const goToApi = () => {\n        if (api.current) api.current.scrollIntoView({ behavior: 'smooth', block: 'center'})\n    }\n\n    return (\n        <div className=\"rui-page\" ref={parent}>\n            <div className=\"row align-center space-between\">\n                <div className=\"rui-page-title\">Tag Component</div>\n                <div onClick={() => goToApi()} className=\"rui-link fz-13 fw-bold mr-10\">API</div>\n            </div>\n            <Card outlined title=\"Tag usage\">\n                <div className=\"row column py-10\">\n                    <Switch \n                        color=\"primary\" \n                        check={outlined}\n                        rightLabel=\"Outlined\" \n                        className=\"my-10\"\n                        onChange={() => setOutlined(!outlined)}/>\n                    <Switch \n                        color=\"primary\" \n                        check={small}\n                        rightLabel=\"Small\" \n                        className=\"my-10\"\n                        onChange={() => setSmall(!small)}/>\n                    <Switch \n                        color=\"primary\" \n                        check={closable}\n                        rightLabel=\"Closable\" \n                        className=\"my-10\"\n                        onChange={() => setClosable(!closable)}/>\n                    <Switch \n                        color=\"primary\" \n                        check={icon}\n                        rightLabel=\"Icon\" \n                        className=\"my-10\"\n                        onChange={() => setIcon(!icon)}/>\n                    <Switch \n                        color=\"primary\" \n                        check={lifted}\n                        rightLabel=\"Lifted\" \n                        className=\"my-10\"\n                        onChange={() => setLifted(!lifted)}/>\n                </div>\n                <div className=\"row align-center pb-10\">\n                    <Select\n                        items={colors}\n                        prefix={<Icon name=\"brush\"/>}\n                        width={200}\n                        label=\"Color\"\n                        color=\"primary\"\n                        value={color}\n                        className=\"mr-10\"\n                        onChange={v => setColor(v)}/>\n                    <Select\n                        items={borders}\n                        prefix={<Icon name=\"shape\"/>}\n                        width={200}\n                        label=\"Border type\"\n                        color=\"primary\"\n                        value={borderType}\n                        onChange={v => setBorderType(v)}/>\n                </div>\n                <div className=\"row align-center\">\n                    <Tag \n                        value=\"Price: 1000\"\n                        outlined={outlined} \n                        color={color}\n                        small={small}\n                        borderType={borderType}\n                        iconLeft={icon ? 'tenge' : ''}\n                        closable={closable}\n                        lifted={lifted}\n                        visible={visible}\n                        onClose={() => setVisible(false)}/>\n                    {closable ? <Button \n                        name=\"Return Tag\" \n                        color=\"info\" \n                        className=\"ml-20\" \n                        onClick={() => setVisible(true)}/> : ''}\n                </div>\n                <Collapse icon=\"code\" iconSize={18} tooltip=\"Code\">\n                    <SyntaxHighlighter language=\"jsx\" style={prism}>\n                        {tagColors}\n                    </SyntaxHighlighter>\n                </Collapse>\n            </Card>\n            <h2 ref={api}>API</h2>\n            <BackTopBtn setRef={parent} dark size=\"medium\"/>\n            <Table\n                bordered\n                headers={['Property', 'Description', 'Default', 'Type', 'Value']}\n                items={items}\n                index={true}\n                itemTitles={keys}/>\n        </div>\n    )\n}\n\nexport default TagPage;\n"],"sourceRoot":""}